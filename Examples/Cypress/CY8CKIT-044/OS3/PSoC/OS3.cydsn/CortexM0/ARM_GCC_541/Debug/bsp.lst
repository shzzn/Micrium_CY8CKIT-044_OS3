ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bsp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	RGB_PrevVal
  20              		.data
  21              		.align	2
  22              		.type	RGB_PrevVal, %object
  23              		.size	RGB_PrevVal, 4
  24              	RGB_PrevVal:
  25 0000 000000FF 		.word	-16777216
  26              		.section	.text.BSP_Init,"ax",%progbits
  27              		.align	2
  28              		.global	BSP_Init
  29              		.code	16
  30              		.thumb_func
  31              		.type	BSP_Init, %function
  32              	BSP_Init:
  33              	.LFB34:
  34              		.file 1 "..\\..\\..\\BSP\\bsp.c"
   1:..\..\..\BSP/bsp.c **** /*
   2:..\..\..\BSP/bsp.c **** ***************************************************************************************************
   3:..\..\..\BSP/bsp.c **** *                                     MICIRUM BOARD SUPPORT PACKAGE
   4:..\..\..\BSP/bsp.c **** *
   5:..\..\..\BSP/bsp.c **** *                             (c) Copyright 2015; Micrium, Inc.; Weston, FL
   6:..\..\..\BSP/bsp.c **** *
   7:..\..\..\BSP/bsp.c **** *               All rights reserved.  Protected by international copyright laws.
   8:..\..\..\BSP/bsp.c **** *               Knowledge of the source code may NOT be used to develop a similar product.
   9:..\..\..\BSP/bsp.c **** *               Please help us continue to provide the Embedded community with the finest
  10:..\..\..\BSP/bsp.c **** *               software available.  Your honesty is greatly appreciated.
  11:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  12:..\..\..\BSP/bsp.c **** */
  13:..\..\..\BSP/bsp.c **** 
  14:..\..\..\BSP/bsp.c **** /*
  15:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  16:..\..\..\BSP/bsp.c **** *                                        BOARD SUPPORT PACKAGE
  17:..\..\..\BSP/bsp.c **** *
  18:..\..\..\BSP/bsp.c **** *                                           CYPRESS PSoC5
  19:..\..\..\BSP/bsp.c **** *                                              with the
  20:..\..\..\BSP/bsp.c **** *                                     CY8CKIT-050 Development Kit
  21:..\..\..\BSP/bsp.c **** *
  22:..\..\..\BSP/bsp.c **** * Filename      : bsp.c
  23:..\..\..\BSP/bsp.c **** * Version       : V1.00
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 2


  24:..\..\..\BSP/bsp.c **** * Programmer(s) : DC
  25:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  26:..\..\..\BSP/bsp.c **** */
  27:..\..\..\BSP/bsp.c **** 
  28:..\..\..\BSP/bsp.c **** /*
  29:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  30:..\..\..\BSP/bsp.c **** *                                             INCLUDE FILES
  31:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  32:..\..\..\BSP/bsp.c **** */
  33:..\..\..\BSP/bsp.c **** 
  34:..\..\..\BSP/bsp.c **** #define   BSP_MODULE
  35:..\..\..\BSP/bsp.c **** #include  "bsp.h"
  36:..\..\..\BSP/bsp.c **** 
  37:..\..\..\BSP/bsp.c **** #include  <Accel_ISR.h>
  38:..\..\..\BSP/bsp.c **** #include  <Accel_Pin.h>
  39:..\..\..\BSP/bsp.c **** 
  40:..\..\..\BSP/bsp.c **** 
  41:..\..\..\BSP/bsp.c **** /*
  42:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  43:..\..\..\BSP/bsp.c **** *                                            LOCAL DEFINES
  44:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  45:..\..\..\BSP/bsp.c **** */
  46:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- COLOR DEFINE
  47:..\..\..\BSP/bsp.c **** #define  BSP_RGB_BRIGHT_SAT_SHIFT               0x01u
  48:..\..\..\BSP/bsp.c **** #define  BSP_RGB_MAX_ALPHA_VAL                  0xFFu
  49:..\..\..\BSP/bsp.c **** 
  50:..\..\..\BSP/bsp.c ****                                                                 /* -------------- COLOR POSITION DE
  51:..\..\..\BSP/bsp.c **** #define  BSP_RGB_ALPHA_POS_SHIFT                24u             /* Shift to set the Alpha Value to 
  52:..\..\..\BSP/bsp.c **** #define  BSP_RGB_RED_POS_SHIFT                  16u             /* Shift to set the RED   Value to 
  53:..\..\..\BSP/bsp.c **** #define  BSP_RGB_GREEN_POS_SHIFT                 8u             /* Shift to set the Green Value to 
  54:..\..\..\BSP/bsp.c **** #define  BSP_RGB_BLUE_POS_SHIFT                  0u             /* Shift to set the Blue  Value to 
  55:..\..\..\BSP/bsp.c **** 
  56:..\..\..\BSP/bsp.c ****                                                                 /* ------------------ ACCEL: DEFINE
  57:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_INVALID_MSK                  0xF000u         /* Mask Accelerometer Value if Over
  58:..\..\..\BSP/bsp.c **** 
  59:..\..\..\BSP/bsp.c ****                                                                 /* --------------- ACCEL: WAKEUP VA
  60:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_WAKEUP_CNTS                  50u             /* Desired Delay : 1 sec; Cnts:   1
  61:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_WAKEUP_THRESH_CNTS            8u             /* Desired Thresh: 0.5g ; Cnts: 0.5
  62:..\..\..\BSP/bsp.c **** 
  63:..\..\..\BSP/bsp.c **** 
  64:..\..\..\BSP/bsp.c **** /*
  65:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  66:..\..\..\BSP/bsp.c **** *                                           LOCAL CONSTANTS
  67:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  68:..\..\..\BSP/bsp.c **** */
  69:..\..\..\BSP/bsp.c **** 
  70:..\..\..\BSP/bsp.c **** 
  71:..\..\..\BSP/bsp.c **** /*
  72:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  73:..\..\..\BSP/bsp.c **** *                                             LOCAL MACROs
  74:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  75:..\..\..\BSP/bsp.c **** */
  76:..\..\..\BSP/bsp.c **** 
  77:..\..\..\BSP/bsp.c **** 
  78:..\..\..\BSP/bsp.c **** /*
  79:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  80:..\..\..\BSP/bsp.c **** *                                       LOCAL GLOBAL VARIABLES
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 3


  81:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  82:..\..\..\BSP/bsp.c **** */
  83:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- RGB LED VARs
  84:..\..\..\BSP/bsp.c **** CPU_INT32U  RGB_PrevVal = BSP_RGB_COLOR_OFF;
  85:..\..\..\BSP/bsp.c **** 
  86:..\..\..\BSP/bsp.c **** 
  87:..\..\..\BSP/bsp.c **** /*
  88:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  89:..\..\..\BSP/bsp.c **** *                                      LOCAL FUNCTION PROTOTYPES
  90:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  91:..\..\..\BSP/bsp.c **** */
  92:..\..\..\BSP/bsp.c ****                                                                 /* --------------- ACCEL LOCAL FUNC
  93:..\..\..\BSP/bsp.c **** static  CPU_BOOLEAN  BSP_Accel_InitSelfTst (void);
  94:..\..\..\BSP/bsp.c **** 
  95:..\..\..\BSP/bsp.c **** static  CPU_BOOLEAN  BSP_Accel_RegRdWr     (BSP_KXTJ2_DATA_DIR   rd_wr,
  96:..\..\..\BSP/bsp.c ****                                             CPU_INT08U           reg,
  97:..\..\..\BSP/bsp.c ****                                             CPU_INT08U          *value);
  98:..\..\..\BSP/bsp.c ****                                                                 
  99:..\..\..\BSP/bsp.c **** /*
 100:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 101:..\..\..\BSP/bsp.c **** *                                         LOCAL ISR PROTOTYPES
 102:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 103:..\..\..\BSP/bsp.c **** */
 104:..\..\..\BSP/bsp.c ****                                                                 /* -------------- BSP ACCELEROMETER
 105:..\..\..\BSP/bsp.c **** CY_ISR_PROTO(BSP_Accel_ISR_Handler);                            /* See BSP_Init Note (2B) For more 
 106:..\..\..\BSP/bsp.c **** 
 107:..\..\..\BSP/bsp.c **** 
 108:..\..\..\BSP/bsp.c **** /*
 109:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 110:..\..\..\BSP/bsp.c **** *                                              BSP_Init()
 111:..\..\..\BSP/bsp.c **** *
 112:..\..\..\BSP/bsp.c **** * Description : Initialize Board Support Package.
 113:..\..\..\BSP/bsp.c **** *
 114:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 115:..\..\..\BSP/bsp.c **** *
 116:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 117:..\..\..\BSP/bsp.c **** *
 118:..\..\..\BSP/bsp.c **** * Caller(s)   : main().
 119:..\..\..\BSP/bsp.c **** *
 120:..\..\..\BSP/bsp.c **** * Note(s)     : (1) This funtion initializes Peripherals required. For this BSP, the BSP_Init() mus
 121:..\..\..\BSP/bsp.c **** *                   called before the OS Initializes due to the Configuration of the OS Interrupt a
 122:..\..\..\BSP/bsp.c **** *                   PendSV Handlers being done here. Since these are Interrupts are based on the CP
 123:..\..\..\BSP/bsp.c **** *                   NVIC Interrupt Sources, they are handled differently than Peripheral Interrupts
 124:..\..\..\BSP/bsp.c **** *
 125:..\..\..\BSP/bsp.c **** *               (2) For Peripheral Interrupts, each Interrupt 'name' (set in the 'TopDesign.cysch' 
 126:..\..\..\BSP/bsp.c **** *                   will generate source code files with that specific name. under the Interrupt's
 127:..\..\..\BSP/bsp.c **** *                   <name.c> file, there the <name's> default ISR handler will be generated and you
 128:..\..\..\BSP/bsp.c **** *                   code's ISR Handler should be added there within the comments to not be removed 
 129:..\..\..\BSP/bsp.c **** *                   the next necessary compile of the 'Generated Sources'.
 130:..\..\..\BSP/bsp.c **** *                   (A) Another option would be to call the <name's>_StartEx(ISR Handler) call wher
 131:..\..\..\BSP/bsp.c **** *                       argument passed is the address of the ISR to set in the IVT.
 132:..\..\..\BSP/bsp.c **** *
 133:..\..\..\BSP/bsp.c **** *                   (B) Each ISR Function should use the CY_ISR and CY_ISR_PROTO macros to provide
 134:..\..\..\BSP/bsp.c **** *                       consistency definition across compilers using the following examples:
 135:..\..\..\BSP/bsp.c **** *                           - Function Definition Example:
 136:..\..\..\BSP/bsp.c **** *                               CY_ISR(MyISR) {...}
 137:..\..\..\BSP/bsp.c **** *                           - Function Prototype  Example:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 4


 138:..\..\..\BSP/bsp.c **** *                               CY_ISR_PROTO(MyISR);
 139:..\..\..\BSP/bsp.c **** *
 140:..\..\..\BSP/bsp.c **** *               (3) Every OS-Aware ISR should follow the following example setup:
 141:..\..\..\BSP/bsp.c **** *                       CY_ISR(MyISR)
 142:..\..\..\BSP/bsp.c **** *                       {
 143:..\..\..\BSP/bsp.c **** *                           CPU_SR_ALLOC();
 144:..\..\..\BSP/bsp.c **** *
 145:..\..\..\BSP/bsp.c **** *
 146:..\..\..\BSP/bsp.c **** *                           CPU_CRITICAL_ENTER();
 147:..\..\..\BSP/bsp.c **** *                           OSIntEnter();
 148:..\..\..\BSP/bsp.c **** *                           CPU_CRITICAL_EXIT();
 149:..\..\..\BSP/bsp.c **** *
 150:..\..\..\BSP/bsp.c **** *                           <Handle ISR Here>
 151:..\..\..\BSP/bsp.c **** *
 152:..\..\..\BSP/bsp.c **** *                           OSIntExit();
 153:..\..\..\BSP/bsp.c **** *                       }
 154:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 155:..\..\..\BSP/bsp.c **** */
 156:..\..\..\BSP/bsp.c **** 
 157:..\..\..\BSP/bsp.c **** 
 158:..\..\..\BSP/bsp.c **** void BSP_Init (void)
 159:..\..\..\BSP/bsp.c **** {
  35              		.loc 1 159 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 8
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
 160:..\..\..\BSP/bsp.c ****     CPU_INT32U   reg_val;
 161:..\..\..\BSP/bsp.c ****     CPU_INT32U  *p_vect_tbl;
 162:..\..\..\BSP/bsp.c ****     
 163:..\..\..\BSP/bsp.c ****                                                                 /* -------------- SET PENDSV & TICK
 164:..\..\..\BSP/bsp.c ****     reg_val = CPU_REG_NVIC_VTOR;                                /* Get the NVIC Offset Table       
  47              		.loc 1 164 0
  48 0006 114B     		ldr	r3, .L2
  49 0008 1B68     		ldr	r3, [r3]
  50 000a 7B60     		str	r3, [r7, #4]
 165:..\..\..\BSP/bsp.c ****     DEF_BIT_CLR(reg_val, DEF_BIT_29);                           /* Clear the TBLBASE Bit           
  51              		.loc 1 165 0
  52 000c 7B68     		ldr	r3, [r7, #4]
  53 000e 104A     		ldr	r2, .L2+4
  54 0010 1340     		ands	r3, r2
  55 0012 7B60     		str	r3, [r7, #4]
 166:..\..\..\BSP/bsp.c ****     
 167:..\..\..\BSP/bsp.c ****     p_vect_tbl                  = (CPU_INT32U *)reg_val;           
  56              		.loc 1 167 0
  57 0014 7B68     		ldr	r3, [r7, #4]
  58 0016 3B60     		str	r3, [r7]
 168:..\..\..\BSP/bsp.c ****                                                                 /* Install the PendSV & Systick Int
 169:..\..\..\BSP/bsp.c ****     p_vect_tbl[CPU_INT_PENDSV]  = (CPU_INT32U  )PendSV_Handler;
  59              		.loc 1 169 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 5


  60 0018 3B68     		ldr	r3, [r7]
  61 001a 3833     		adds	r3, r3, #56
  62 001c 0D4A     		ldr	r2, .L2+8
  63 001e 1A60     		str	r2, [r3]
 170:..\..\..\BSP/bsp.c ****     p_vect_tbl[CPU_INT_SYSTICK] = (CPU_INT32U  )SysTick_Handler;
  64              		.loc 1 170 0
  65 0020 3B68     		ldr	r3, [r7]
  66 0022 3C33     		adds	r3, r3, #60
  67 0024 0C4A     		ldr	r2, .L2+12
  68 0026 1A60     		str	r2, [r3]
 171:..\..\..\BSP/bsp.c ****     
 172:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- INIT RGB LED P
 173:..\..\..\BSP/bsp.c ****     PWM_Red_Start();                                            /* Enable and Start the PWM Block f
  69              		.loc 1 173 0
  70 0028 FFF7FEFF 		bl	PWM_Red_Start
 174:..\..\..\BSP/bsp.c **** 	PWM_Green_Start();
  71              		.loc 1 174 0
  72 002c FFF7FEFF 		bl	PWM_Green_Start
 175:..\..\..\BSP/bsp.c **** 	PWM_Blue_Start();
  73              		.loc 1 175 0
  74 0030 FFF7FEFF 		bl	PWM_Blue_Start
 176:..\..\..\BSP/bsp.c ****     
 177:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- INIT TEMP SENS
 178:..\..\..\BSP/bsp.c ****     Temp_Sensor_Start();                                        /* Initialize and Start the TMP05 T
  75              		.loc 1 178 0
  76 0034 FFF7FEFF 		bl	Temp_Sensor_Start
 179:..\..\..\BSP/bsp.c ****     Temp_Sensor_Trigger();                                      /* Trigger the Temp Sensor Componen
  77              		.loc 1 179 0
  78 0038 FFF7FEFF 		bl	Temp_Sensor_Trigger
 180:..\..\..\BSP/bsp.c ****     
 181:..\..\..\BSP/bsp.c ****                                                                 /* --------------- AMBIENT LIGHT SE
 182:..\..\..\BSP/bsp.c ****     Opamp_Start();                                              /* Start the OpAmp Hardware require
  79              		.loc 1 182 0
  80 003c FFF7FEFF 		bl	Opamp_Start
 183:..\..\..\BSP/bsp.c ****     ADC_Start();                                                /* Enable and Start the ADC Block. 
  81              		.loc 1 183 0
  82 0040 FFF7FEFF 		bl	ADC_Start
 184:..\..\..\BSP/bsp.c **** }
  83              		.loc 1 184 0
  84 0044 C046     		nop
  85 0046 BD46     		mov	sp, r7
  86 0048 02B0     		add	sp, sp, #8
  87              		@ sp needed
  88 004a 80BD     		pop	{r7, pc}
  89              	.L3:
  90              		.align	2
  91              	.L2:
  92 004c 08ED00E0 		.word	-536810232
  93 0050 FFFFFFDF 		.word	-536870913
  94 0054 00000000 		.word	PendSV_Handler
  95 0058 00000000 		.word	SysTick_Handler
  96              		.cfi_endproc
  97              	.LFE34:
  98              		.size	BSP_Init, .-BSP_Init
  99              		.section	.text.BSP_CPU_TickInit,"ax",%progbits
 100              		.align	2
 101              		.global	BSP_CPU_TickInit
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 6


 102              		.code	16
 103              		.thumb_func
 104              		.type	BSP_CPU_TickInit, %function
 105              	BSP_CPU_TickInit:
 106              	.LFB35:
 185:..\..\..\BSP/bsp.c **** 
 186:..\..\..\BSP/bsp.c **** 
 187:..\..\..\BSP/bsp.c **** /*
 188:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 189:..\..\..\BSP/bsp.c **** *                                          BSP_CPU_TickInit()
 190:..\..\..\BSP/bsp.c **** *
 191:..\..\..\BSP/bsp.c **** * Description : Configure and Initialize the Tick Interrupt.
 192:..\..\..\BSP/bsp.c **** *
 193:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 194:..\..\..\BSP/bsp.c **** *
 195:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 196:..\..\..\BSP/bsp.c **** *
 197:..\..\..\BSP/bsp.c **** * Caller(s)   : App_TaskStart().
 198:..\..\..\BSP/bsp.c **** *
 199:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The ARM-Cortex-M0 Port figures out the necessary qty of Ticks required for the
 200:..\..\..\BSP/bsp.c **** *                   Periodic Time Source (SysTick) by just passing the CPU Clock Frequency to the
 201:..\..\..\BSP/bsp.c **** *                   OS_CPU_SysTickInit function.
 202:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 203:..\..\..\BSP/bsp.c **** */
 204:..\..\..\BSP/bsp.c **** 
 205:..\..\..\BSP/bsp.c **** void  BSP_CPU_TickInit (void)
 206:..\..\..\BSP/bsp.c **** {
 107              		.loc 1 206 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 82B0     		sub	sp, sp, #8
 116              		.cfi_def_cfa_offset 16
 117 0004 00AF     		add	r7, sp, #0
 118              		.cfi_def_cfa_register 7
 207:..\..\..\BSP/bsp.c ****     CPU_INT32U  cpu_clk_freq;
 208:..\..\..\BSP/bsp.c ****     
 209:..\..\..\BSP/bsp.c ****     
 210:..\..\..\BSP/bsp.c ****     cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine CPU Clock Frequency fo
 119              		.loc 1 210 0
 120 0006 FFF7FEFF 		bl	BSP_CPU_ClkFreq
 121 000a 0300     		movs	r3, r0
 122 000c 7B60     		str	r3, [r7, #4]
 211:..\..\..\BSP/bsp.c **** 
 212:..\..\..\BSP/bsp.c ****     OS_CPU_SysTickInit(cpu_clk_freq);                           /* Init uC/OS Periodic Time Source 
 123              		.loc 1 212 0
 124 000e 7B68     		ldr	r3, [r7, #4]
 125 0010 1800     		movs	r0, r3
 126 0012 FFF7FEFF 		bl	OS_CPU_SysTickInit
 213:..\..\..\BSP/bsp.c **** }
 127              		.loc 1 213 0
 128 0016 C046     		nop
 129 0018 BD46     		mov	sp, r7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 7


 130 001a 02B0     		add	sp, sp, #8
 131              		@ sp needed
 132 001c 80BD     		pop	{r7, pc}
 133              		.cfi_endproc
 134              	.LFE35:
 135              		.size	BSP_CPU_TickInit, .-BSP_CPU_TickInit
 136 001e C046     		.section	.text.BSP_CPU_ClkFreq,"ax",%progbits
 137              		.align	2
 138              		.global	BSP_CPU_ClkFreq
 139              		.code	16
 140              		.thumb_func
 141              		.type	BSP_CPU_ClkFreq, %function
 142              	BSP_CPU_ClkFreq:
 143              	.LFB36:
 214:..\..\..\BSP/bsp.c **** 
 215:..\..\..\BSP/bsp.c **** 
 216:..\..\..\BSP/bsp.c **** /*
 217:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 218:..\..\..\BSP/bsp.c **** *                                          BSP_CPU_ClkFreq()
 219:..\..\..\BSP/bsp.c **** *
 220:..\..\..\BSP/bsp.c **** * Description : Returns the CPU's Clock Frequency Configured.
 221:..\..\..\BSP/bsp.c **** *
 222:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 223:..\..\..\BSP/bsp.c **** *
 224:..\..\..\BSP/bsp.c **** * Return(s)   : The CPU clock frequency, in Hz.
 225:..\..\..\BSP/bsp.c **** *
 226:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_CPU_TickInit().
 227:..\..\..\BSP/bsp.c **** *
 228:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 229:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 230:..\..\..\BSP/bsp.c **** */
 231:..\..\..\BSP/bsp.c **** 
 232:..\..\..\BSP/bsp.c **** CPU_INT32U  BSP_CPU_ClkFreq (void)
 233:..\..\..\BSP/bsp.c **** {
 144              		.loc 1 233 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148 0000 80B5     		push	{r7, lr}
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 7, -8
 151              		.cfi_offset 14, -4
 152 0002 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 234:..\..\..\BSP/bsp.c ****     return (BSP_PSOC_CPU_FREQ);
 154              		.loc 1 234 0
 155 0004 014B     		ldr	r3, .L7
 235:..\..\..\BSP/bsp.c **** }
 156              		.loc 1 235 0
 157 0006 1800     		movs	r0, r3
 158 0008 BD46     		mov	sp, r7
 159              		@ sp needed
 160 000a 80BD     		pop	{r7, pc}
 161              	.L8:
 162              		.align	2
 163              	.L7:
 164 000c 006CDC02 		.word	48000000
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 8


 165              		.cfi_endproc
 166              	.LFE36:
 167              		.size	BSP_CPU_ClkFreq, .-BSP_CPU_ClkFreq
 168              		.section	.text.BSP_RGB_On,"ax",%progbits
 169              		.align	2
 170              		.global	BSP_RGB_On
 171              		.code	16
 172              		.thumb_func
 173              		.type	BSP_RGB_On, %function
 174              	BSP_RGB_On:
 175              	.LFB37:
 236:..\..\..\BSP/bsp.c **** 
 237:..\..\..\BSP/bsp.c **** 
 238:..\..\..\BSP/bsp.c **** /*
 239:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 240:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 241:..\..\..\BSP/bsp.c **** *                                            LED FUNCTIONS
 242:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 243:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 244:..\..\..\BSP/bsp.c **** */
 245:..\..\..\BSP/bsp.c **** 
 246:..\..\..\BSP/bsp.c **** 
 247:..\..\..\BSP/bsp.c **** /*
 248:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 249:..\..\..\BSP/bsp.c **** *                                             BSP_RGB_On()
 250:..\..\..\BSP/bsp.c **** *
 251:..\..\..\BSP/bsp.c **** * Description : Turn ON the RBG LED on the Board with the Last Value saved before an BSP_RGB_Off() 
 252:..\..\..\BSP/bsp.c **** *
 253:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 254:..\..\..\BSP/bsp.c **** *
 255:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 256:..\..\..\BSP/bsp.c **** *
 257:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 258:..\..\..\BSP/bsp.c **** *
 259:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGB_PrevVal holds the Hex (0x) value previously saved when the RGB LED was 
 260:..\..\..\BSP/bsp.c **** *                   turned off.
 261:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 262:..\..\..\BSP/bsp.c **** */
 263:..\..\..\BSP/bsp.c **** 
 264:..\..\..\BSP/bsp.c **** void  BSP_RGB_On (void)
 265:..\..\..\BSP/bsp.c **** {
 176              		.loc 1 265 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 266:..\..\..\BSP/bsp.c ****     BSP_RGB_ColorSet(RGB_PrevVal);                              /* Restore the RGB Color of the Pre
 186              		.loc 1 266 0
 187 0004 034B     		ldr	r3, .L10
 188 0006 1B68     		ldr	r3, [r3]
 189 0008 1800     		movs	r0, r3
 190 000a FFF7FEFF 		bl	BSP_RGB_ColorSet
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 9


 267:..\..\..\BSP/bsp.c **** }
 191              		.loc 1 267 0
 192 000e C046     		nop
 193 0010 BD46     		mov	sp, r7
 194              		@ sp needed
 195 0012 80BD     		pop	{r7, pc}
 196              	.L11:
 197              		.align	2
 198              	.L10:
 199 0014 00000000 		.word	RGB_PrevVal
 200              		.cfi_endproc
 201              	.LFE37:
 202              		.size	BSP_RGB_On, .-BSP_RGB_On
 203              		.section	.text.BSP_RGB_Off,"ax",%progbits
 204              		.align	2
 205              		.global	BSP_RGB_Off
 206              		.code	16
 207              		.thumb_func
 208              		.type	BSP_RGB_Off, %function
 209              	BSP_RGB_Off:
 210              	.LFB38:
 268:..\..\..\BSP/bsp.c **** 
 269:..\..\..\BSP/bsp.c **** 
 270:..\..\..\BSP/bsp.c **** /*
 271:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 272:..\..\..\BSP/bsp.c **** *                                            BSP_RGB_Off()
 273:..\..\..\BSP/bsp.c **** *
 274:..\..\..\BSP/bsp.c **** * Description : Turn OFF the RBG LED on the Board and save the Current Color Value.
 275:..\..\..\BSP/bsp.c **** *
 276:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 277:..\..\..\BSP/bsp.c **** *
 278:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 279:..\..\..\BSP/bsp.c **** *
 280:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 281:..\..\..\BSP/bsp.c **** *
 282:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGB_PrevVal will save the current value of the RBG LED, in Hex (0x), to res
 283:..\..\..\BSP/bsp.c **** *                   the same color next time the RGB LED is turned on.
 284:..\..\..\BSP/bsp.c **** *
 285:..\..\..\BSP/bsp.c **** *               (2) RGB Black Value = 0xFF000000u, which signifies LED is OFF.
 286:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 287:..\..\..\BSP/bsp.c **** */
 288:..\..\..\BSP/bsp.c **** 
 289:..\..\..\BSP/bsp.c **** void  BSP_RGB_Off (void)
 290:..\..\..\BSP/bsp.c **** {
 211              		.loc 1 290 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 80B5     		push	{r7, lr}
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 291:..\..\..\BSP/bsp.c ****     RGB_PrevVal = BSP_RGB_ColorRead();                          /* Save the Current RBG Color Value
 221              		.loc 1 291 0
 222 0004 FFF7FEFF 		bl	BSP_RGB_ColorRead
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 10


 223 0008 0200     		movs	r2, r0
 224 000a 054B     		ldr	r3, .L13
 225 000c 1A60     		str	r2, [r3]
 292:..\..\..\BSP/bsp.c ****     BSP_RGB_ColorSet(BSP_RGB_COLOR_OFF);                        /* Turn the RGB Color LED OFF.     
 226              		.loc 1 292 0
 227 000e FF23     		movs	r3, #255
 228 0010 1B06     		lsls	r3, r3, #24
 229 0012 1800     		movs	r0, r3
 230 0014 FFF7FEFF 		bl	BSP_RGB_ColorSet
 293:..\..\..\BSP/bsp.c **** }
 231              		.loc 1 293 0
 232 0018 C046     		nop
 233 001a BD46     		mov	sp, r7
 234              		@ sp needed
 235 001c 80BD     		pop	{r7, pc}
 236              	.L14:
 237 001e C046     		.align	2
 238              	.L13:
 239 0020 00000000 		.word	RGB_PrevVal
 240              		.cfi_endproc
 241              	.LFE38:
 242              		.size	BSP_RGB_Off, .-BSP_RGB_Off
 243              		.section	.text.BSP_RGB_ColorSet,"ax",%progbits
 244              		.align	2
 245              		.global	BSP_RGB_ColorSet
 246              		.code	16
 247              		.thumb_func
 248              		.type	BSP_RGB_ColorSet, %function
 249              	BSP_RGB_ColorSet:
 250              	.LFB39:
 294:..\..\..\BSP/bsp.c **** 
 295:..\..\..\BSP/bsp.c **** 
 296:..\..\..\BSP/bsp.c **** /*
 297:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 298:..\..\..\BSP/bsp.c **** *                                          BSP_RGB_ColorSet()
 299:..\..\..\BSP/bsp.c **** *
 300:..\..\..\BSP/bsp.c **** * Description : TOGGLE any or all the LEDs on the board.
 301:..\..\..\BSP/bsp.c **** *
 302:..\..\..\BSP/bsp.c **** * Argument(s) : color   The Color Value (in Hex) desired to Set.
 303:..\..\..\BSP/bsp.c **** *
 304:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 305:..\..\..\BSP/bsp.c **** *
 306:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 307:..\..\..\BSP/bsp.c **** *
 308:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGBA Color Value (in Hex) is represented in the following way:
 309:..\..\..\BSP/bsp.c **** *                       Color = 0x FF 12 34 56
 310:..\..\..\BSP/bsp.c **** *                                   \  \  \  \
 311:..\..\..\BSP/bsp.c **** *                                    \  \  \  - Blue  LED Color.
 312:..\..\..\BSP/bsp.c **** *                                     \  \  - - Green LED Color.
 313:..\..\..\BSP/bsp.c **** *                                      \  - - - Red   LED Color.
 314:..\..\..\BSP/bsp.c **** *                                       - - - - Alpha Index Value.
 315:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 316:..\..\..\BSP/bsp.c **** */
 317:..\..\..\BSP/bsp.c **** 
 318:..\..\..\BSP/bsp.c **** void  BSP_RGB_ColorSet (CPU_INT32U  color)
 319:..\..\..\BSP/bsp.c **** {
 251              		.loc 1 319 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 11


 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 16
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255 0000 80B5     		push	{r7, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 84B0     		sub	sp, sp, #16
 260              		.cfi_def_cfa_offset 24
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 320:..\..\..\BSP/bsp.c ****     CPU_INT08U  alpha;
 321:..\..\..\BSP/bsp.c ****     CPU_INT08U  color_val;
 322:..\..\..\BSP/bsp.c ****     CPU_INT16U  pwm_color;
 323:..\..\..\BSP/bsp.c ****     
 324:..\..\..\BSP/bsp.c **** 
 325:..\..\..\BSP/bsp.c ****     alpha     = HI8(HI16(color));                               /* Get Alpha Index from Hex Color V
 264              		.loc 1 325 0
 265 0008 7B68     		ldr	r3, [r7, #4]
 266 000a 1B0C     		lsrs	r3, r3, #16
 267 000c 1A12     		asrs	r2, r3, #8
 268 000e 0F23     		movs	r3, #15
 269 0010 FB18     		adds	r3, r7, r3
 270 0012 1A70     		strb	r2, [r3]
 326:..\..\..\BSP/bsp.c ****     
 327:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET LED COLOR: 
 328:..\..\..\BSP/bsp.c ****     color_val = LO8(HI16(color));                               /* Get Red Value from the Desired R
 271              		.loc 1 328 0
 272 0014 7B68     		ldr	r3, [r7, #4]
 273 0016 1A0C     		lsrs	r2, r3, #16
 274 0018 0E23     		movs	r3, #14
 275 001a FB18     		adds	r3, r7, r3
 276 001c 1A70     		strb	r2, [r3]
 329:..\..\..\BSP/bsp.c ****     
 330:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 331:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 277              		.loc 1 331 0
 278 001e 0F23     		movs	r3, #15
 279 0020 FB18     		adds	r3, r7, r3
 280 0022 1B78     		ldrb	r3, [r3]
 281 0024 1A00     		movs	r2, r3
 282 0026 1B02     		lsls	r3, r3, #8
 283 0028 D31A     		subs	r3, r2, r3
 284 002a 0F22     		movs	r2, #15
 285 002c BA18     		adds	r2, r7, r2
 286 002e 1278     		ldrb	r2, [r2]
 287 0030 0E21     		movs	r1, #14
 288 0032 7918     		adds	r1, r7, r1
 289 0034 0978     		ldrb	r1, [r1]
 290 0036 4A43     		muls	r2, r1
 291 0038 9B18     		adds	r3, r3, r2
 292 003a 284A     		ldr	r2, .L16
 293 003c 9446     		mov	ip, r2
 294 003e 6344     		add	r3, r3, ip
 295 0040 5A08     		lsrs	r2, r3, #1
 296 0042 0C23     		movs	r3, #12
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 12


 297 0044 FB18     		adds	r3, r7, r3
 298 0046 1A80     		strh	r2, [r3]
 332:..\..\..\BSP/bsp.c ****     PWM_Red_WriteCompare(pwm_color);
 299              		.loc 1 332 0
 300 0048 0C23     		movs	r3, #12
 301 004a FB18     		adds	r3, r7, r3
 302 004c 1B88     		ldrh	r3, [r3]
 303 004e 1800     		movs	r0, r3
 304 0050 FFF7FEFF 		bl	PWM_Red_WriteCompare
 333:..\..\..\BSP/bsp.c ****     
 334:..\..\..\BSP/bsp.c ****                                                                 /* --------------- SET LED COLOR: G
 335:..\..\..\BSP/bsp.c ****     color_val = HI8(LO16(color));                               /* Get Green Value from the Desired
 305              		.loc 1 335 0
 306 0054 7B68     		ldr	r3, [r7, #4]
 307 0056 1A12     		asrs	r2, r3, #8
 308 0058 0E23     		movs	r3, #14
 309 005a FB18     		adds	r3, r7, r3
 310 005c 1A70     		strb	r2, [r3]
 336:..\..\..\BSP/bsp.c ****     
 337:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 338:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 311              		.loc 1 338 0
 312 005e 0F23     		movs	r3, #15
 313 0060 FB18     		adds	r3, r7, r3
 314 0062 1B78     		ldrb	r3, [r3]
 315 0064 1A00     		movs	r2, r3
 316 0066 1B02     		lsls	r3, r3, #8
 317 0068 D31A     		subs	r3, r2, r3
 318 006a 0F22     		movs	r2, #15
 319 006c BA18     		adds	r2, r7, r2
 320 006e 1278     		ldrb	r2, [r2]
 321 0070 0E21     		movs	r1, #14
 322 0072 7918     		adds	r1, r7, r1
 323 0074 0978     		ldrb	r1, [r1]
 324 0076 4A43     		muls	r2, r1
 325 0078 9B18     		adds	r3, r3, r2
 326 007a 184A     		ldr	r2, .L16
 327 007c 9446     		mov	ip, r2
 328 007e 6344     		add	r3, r3, ip
 329 0080 5A08     		lsrs	r2, r3, #1
 330 0082 0C23     		movs	r3, #12
 331 0084 FB18     		adds	r3, r7, r3
 332 0086 1A80     		strh	r2, [r3]
 339:..\..\..\BSP/bsp.c ****     PWM_Green_WriteCompare(pwm_color);
 333              		.loc 1 339 0
 334 0088 0C23     		movs	r3, #12
 335 008a FB18     		adds	r3, r7, r3
 336 008c 1B88     		ldrh	r3, [r3]
 337 008e 1800     		movs	r0, r3
 338 0090 FFF7FEFF 		bl	PWM_Green_WriteCompare
 340:..\..\..\BSP/bsp.c ****     
 341:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET LED COLOR: 
 342:..\..\..\BSP/bsp.c ****     color_val = LO8(LO16(color));                               /* Get Blue Value from the Desired 
 339              		.loc 1 342 0
 340 0094 0E23     		movs	r3, #14
 341 0096 FB18     		adds	r3, r7, r3
 342 0098 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 13


 343 009a 1A70     		strb	r2, [r3]
 343:..\..\..\BSP/bsp.c ****     
 344:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 345:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 344              		.loc 1 345 0
 345 009c 0F23     		movs	r3, #15
 346 009e FB18     		adds	r3, r7, r3
 347 00a0 1B78     		ldrb	r3, [r3]
 348 00a2 1A00     		movs	r2, r3
 349 00a4 1B02     		lsls	r3, r3, #8
 350 00a6 D31A     		subs	r3, r2, r3
 351 00a8 0F22     		movs	r2, #15
 352 00aa BA18     		adds	r2, r7, r2
 353 00ac 1278     		ldrb	r2, [r2]
 354 00ae 0E21     		movs	r1, #14
 355 00b0 7918     		adds	r1, r7, r1
 356 00b2 0978     		ldrb	r1, [r1]
 357 00b4 4A43     		muls	r2, r1
 358 00b6 9B18     		adds	r3, r3, r2
 359 00b8 084A     		ldr	r2, .L16
 360 00ba 9446     		mov	ip, r2
 361 00bc 6344     		add	r3, r3, ip
 362 00be 5A08     		lsrs	r2, r3, #1
 363 00c0 0C23     		movs	r3, #12
 364 00c2 FB18     		adds	r3, r7, r3
 365 00c4 1A80     		strh	r2, [r3]
 346:..\..\..\BSP/bsp.c ****     PWM_Blue_WriteCompare(pwm_color);
 366              		.loc 1 346 0
 367 00c6 0C23     		movs	r3, #12
 368 00c8 FB18     		adds	r3, r7, r3
 369 00ca 1B88     		ldrh	r3, [r3]
 370 00cc 1800     		movs	r0, r3
 371 00ce FFF7FEFF 		bl	PWM_Blue_WriteCompare
 347:..\..\..\BSP/bsp.c **** }
 372              		.loc 1 347 0
 373 00d2 C046     		nop
 374 00d4 BD46     		mov	sp, r7
 375 00d6 04B0     		add	sp, sp, #16
 376              		@ sp needed
 377 00d8 80BD     		pop	{r7, pc}
 378              	.L17:
 379 00da C046     		.align	2
 380              	.L16:
 381 00dc 01FE0000 		.word	65025
 382              		.cfi_endproc
 383              	.LFE39:
 384              		.size	BSP_RGB_ColorSet, .-BSP_RGB_ColorSet
 385              		.global	__aeabi_uidiv
 386              		.section	.text.BSP_RGB_ColorRead,"ax",%progbits
 387              		.align	2
 388              		.global	BSP_RGB_ColorRead
 389              		.code	16
 390              		.thumb_func
 391              		.type	BSP_RGB_ColorRead, %function
 392              	BSP_RGB_ColorRead:
 393              	.LFB40:
 348:..\..\..\BSP/bsp.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 14


 349:..\..\..\BSP/bsp.c **** 
 350:..\..\..\BSP/bsp.c **** /*
 351:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 352:..\..\..\BSP/bsp.c **** *                                         BSP_RGB_ColorRead()
 353:..\..\..\BSP/bsp.c **** *
 354:..\..\..\BSP/bsp.c **** * Description : Read and Return the latest Color Value of the RGB LED PWM Signals.
 355:..\..\..\BSP/bsp.c **** *
 356:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 357:..\..\..\BSP/bsp.c **** *
 358:..\..\..\BSP/bsp.c **** * Return(s)   : Converted Color Value of the RGB LED.
 359:..\..\..\BSP/bsp.c **** *
 360:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 361:..\..\..\BSP/bsp.c **** *
 362:..\..\..\BSP/bsp.c **** * Note(s)     : (1) This Function reads the PWM Signals for the Red, Green, and Blue (LED) Signals 
 363:..\..\..\BSP/bsp.c **** *                   conver the Individual RGB Value to an RGBA value to return.
 364:..\..\..\BSP/bsp.c **** *
 365:..\..\..\BSP/bsp.c **** *               (2) This Function assumes a maximum Alpha value (0xFF) will be assigned and used to
 366:..\..\..\BSP/bsp.c **** *                   convert PWM signals to RGB color values (in hex).
 367:..\..\..\BSP/bsp.c **** *
 368:..\..\..\BSP/bsp.c **** *               (3) The RGBA Color Value (in Hex) is represented in the following way:
 369:..\..\..\BSP/bsp.c **** *                       Color = 0x FF 12 34 56
 370:..\..\..\BSP/bsp.c **** *                                   \  \  \  \
 371:..\..\..\BSP/bsp.c **** *                                    \  \  \  - Blue  LED Color.
 372:..\..\..\BSP/bsp.c **** *                                     \  \  - - Green LED Color.
 373:..\..\..\BSP/bsp.c **** *                                      \  - - - Red   LED Color.
 374:..\..\..\BSP/bsp.c **** *                                       - - - - Alpha Index Value.
 375:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 376:..\..\..\BSP/bsp.c **** */
 377:..\..\..\BSP/bsp.c **** 
 378:..\..\..\BSP/bsp.c **** CPU_INT32U  BSP_RGB_ColorRead (void)
 379:..\..\..\BSP/bsp.c **** {
 394              		.loc 1 379 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0000 80B5     		push	{r7, lr}
 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 7, -8
 401              		.cfi_offset 14, -4
 402 0002 82B0     		sub	sp, sp, #8
 403              		.cfi_def_cfa_offset 16
 404 0004 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 380:..\..\..\BSP/bsp.c ****     CPU_INT32U  color;
 381:..\..\..\BSP/bsp.c ****     CPU_INT16U  pwm_color;
 382:..\..\..\BSP/bsp.c ****     CPU_INT08U  color_val;
 383:..\..\..\BSP/bsp.c ****     
 384:..\..\..\BSP/bsp.c ****     
 385:..\..\..\BSP/bsp.c ****     color = (BSP_RGB_MAX_ALPHA_VAL << BSP_RGB_ALPHA_POS_SHIFT); /* Set the Max Alpha Value to RGBA 
 406              		.loc 1 385 0
 407 0006 FF23     		movs	r3, #255
 408 0008 1B06     		lsls	r3, r3, #24
 409 000a 7B60     		str	r3, [r7, #4]
 386:..\..\..\BSP/bsp.c ****     
 387:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- GET LED COLOR: 
 388:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Red_ReadCompare();                          /* Get the PWM Compared Value to co
 410              		.loc 1 388 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 15


 411 000c FFF7FEFF 		bl	PWM_Red_ReadCompare
 412 0010 0200     		movs	r2, r0
 413 0012 BB1C     		adds	r3, r7, #2
 414 0014 1A80     		strh	r2, [r3]
 389:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 415              		.loc 1 389 0
 416 0016 BB1C     		adds	r3, r7, #2
 417 0018 1B88     		ldrh	r3, [r3]
 418 001a 5B00     		lsls	r3, r3, #1
 419 001c FF21     		movs	r1, #255
 420 001e 1800     		movs	r0, r3
 421 0020 FFF7FEFF 		bl	__aeabi_uidiv
 422 0024 0300     		movs	r3, r0
 423 0026 1A00     		movs	r2, r3
 424 0028 7B1C     		adds	r3, r7, #1
 425 002a 1A70     		strb	r2, [r3]
 390:..\..\..\BSP/bsp.c ****     
 391:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_RED_POS_SHIFT);           /* Set the RED Converted value to R
 426              		.loc 1 391 0
 427 002c 7B1C     		adds	r3, r7, #1
 428 002e 1B78     		ldrb	r3, [r3]
 429 0030 1B04     		lsls	r3, r3, #16
 430 0032 1A00     		movs	r2, r3
 431 0034 7B68     		ldr	r3, [r7, #4]
 432 0036 1343     		orrs	r3, r2
 433 0038 7B60     		str	r3, [r7, #4]
 392:..\..\..\BSP/bsp.c ****     
 393:..\..\..\BSP/bsp.c ****                                                                 /* --------------- GET LED COLOR: G
 394:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Green_ReadCompare();                        /* Get the PWM Compared Value to co
 434              		.loc 1 394 0
 435 003a FFF7FEFF 		bl	PWM_Green_ReadCompare
 436 003e 0200     		movs	r2, r0
 437 0040 BB1C     		adds	r3, r7, #2
 438 0042 1A80     		strh	r2, [r3]
 395:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 439              		.loc 1 395 0
 440 0044 BB1C     		adds	r3, r7, #2
 441 0046 1B88     		ldrh	r3, [r3]
 442 0048 5B00     		lsls	r3, r3, #1
 443 004a FF21     		movs	r1, #255
 444 004c 1800     		movs	r0, r3
 445 004e FFF7FEFF 		bl	__aeabi_uidiv
 446 0052 0300     		movs	r3, r0
 447 0054 1A00     		movs	r2, r3
 448 0056 7B1C     		adds	r3, r7, #1
 449 0058 1A70     		strb	r2, [r3]
 396:..\..\..\BSP/bsp.c ****     
 397:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_GREEN_POS_SHIFT);         /* Set the GREEN Converted value to
 450              		.loc 1 397 0
 451 005a 7B1C     		adds	r3, r7, #1
 452 005c 1B78     		ldrb	r3, [r3]
 453 005e 1B02     		lsls	r3, r3, #8
 454 0060 1A00     		movs	r2, r3
 455 0062 7B68     		ldr	r3, [r7, #4]
 456 0064 1343     		orrs	r3, r2
 457 0066 7B60     		str	r3, [r7, #4]
 398:..\..\..\BSP/bsp.c ****     
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 16


 399:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- GET LED COLOR: 
 400:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Blue_ReadCompare();                         /* Get the PWM Compared Value to co
 458              		.loc 1 400 0
 459 0068 FFF7FEFF 		bl	PWM_Blue_ReadCompare
 460 006c 0200     		movs	r2, r0
 461 006e BB1C     		adds	r3, r7, #2
 462 0070 1A80     		strh	r2, [r3]
 401:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 463              		.loc 1 401 0
 464 0072 BB1C     		adds	r3, r7, #2
 465 0074 1B88     		ldrh	r3, [r3]
 466 0076 5B00     		lsls	r3, r3, #1
 467 0078 FF21     		movs	r1, #255
 468 007a 1800     		movs	r0, r3
 469 007c FFF7FEFF 		bl	__aeabi_uidiv
 470 0080 0300     		movs	r3, r0
 471 0082 1A00     		movs	r2, r3
 472 0084 7B1C     		adds	r3, r7, #1
 473 0086 1A70     		strb	r2, [r3]
 402:..\..\..\BSP/bsp.c ****     
 403:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_BLUE_POS_SHIFT);          /* Set the BLUE Converted value to 
 474              		.loc 1 403 0
 475 0088 7B1C     		adds	r3, r7, #1
 476 008a 1B78     		ldrb	r3, [r3]
 477 008c 7A68     		ldr	r2, [r7, #4]
 478 008e 1343     		orrs	r3, r2
 479 0090 7B60     		str	r3, [r7, #4]
 404:..\..\..\BSP/bsp.c ****     
 405:..\..\..\BSP/bsp.c ****     return (color);
 480              		.loc 1 405 0
 481 0092 7B68     		ldr	r3, [r7, #4]
 406:..\..\..\BSP/bsp.c **** }
 482              		.loc 1 406 0
 483 0094 1800     		movs	r0, r3
 484 0096 BD46     		mov	sp, r7
 485 0098 02B0     		add	sp, sp, #8
 486              		@ sp needed
 487 009a 80BD     		pop	{r7, pc}
 488              		.cfi_endproc
 489              	.LFE40:
 490              		.size	BSP_RGB_ColorRead, .-BSP_RGB_ColorRead
 491              		.section	.text.BSP_PB_StatusGet,"ax",%progbits
 492              		.align	2
 493              		.global	BSP_PB_StatusGet
 494              		.code	16
 495              		.thumb_func
 496              		.type	BSP_PB_StatusGet, %function
 497              	BSP_PB_StatusGet:
 498              	.LFB41:
 407:..\..\..\BSP/bsp.c **** 
 408:..\..\..\BSP/bsp.c **** 
 409:..\..\..\BSP/bsp.c **** /*
 410:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 411:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 412:..\..\..\BSP/bsp.c **** *                                        PUSH BUTTON FUNCTIONS
 413:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 414:..\..\..\BSP/bsp.c **** ***************************************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 17


 415:..\..\..\BSP/bsp.c **** */
 416:..\..\..\BSP/bsp.c **** 
 417:..\..\..\BSP/bsp.c **** /*
 418:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 419:..\..\..\BSP/bsp.c **** *                                          BSP_PB_StatusGet()
 420:..\..\..\BSP/bsp.c **** *
 421:..\..\..\BSP/bsp.c **** * Description : Get the current status of the push buttons.
 422:..\..\..\BSP/bsp.c **** *
 423:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 424:..\..\..\BSP/bsp.c **** *
 425:..\..\..\BSP/bsp.c **** * Return(s)   : Status of the Push Button (Active Low).
 426:..\..\..\BSP/bsp.c **** *                   - DEF_ON    If the push button is pressed.
 427:..\..\..\BSP/bsp.c **** *                   - DEF_OFF,  Otherwise.
 428:..\..\..\BSP/bsp.c **** *
 429:..\..\..\BSP/bsp.c **** * Caller(s)   : Application
 430:..\..\..\BSP/bsp.c **** *
 431:..\..\..\BSP/bsp.c **** * Note(s)     : (1) 'SW2' is the Set name of the only Push button (USER SW) found on the board. If 
 432:..\..\..\BSP/bsp.c **** *                   push button name changes, this Function call must be updated.
 433:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 434:..\..\..\BSP/bsp.c **** */
 435:..\..\..\BSP/bsp.c **** 
 436:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_PB_StatusGet (void)
 437:..\..\..\BSP/bsp.c **** {
 499              		.loc 1 437 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 90B5     		push	{r4, r7, lr}
 504              		.cfi_def_cfa_offset 12
 505              		.cfi_offset 4, -12
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              		.cfi_def_cfa_offset 24
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 438:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  pb_status;
 439:..\..\..\BSP/bsp.c ****     CPU_INT08U   sw_val;
 440:..\..\..\BSP/bsp.c **** 
 441:..\..\..\BSP/bsp.c ****     
 442:..\..\..\BSP/bsp.c ****     sw_val = SW2_Read();                                        /* Get Push Button 'SW2' Status.   
 512              		.loc 1 442 0
 513 0006 FC1D     		adds	r4, r7, #7
 514 0008 FFF7FEFF 		bl	SW2_Read
 515 000c 0300     		movs	r3, r0
 516 000e 2370     		strb	r3, [r4]
 443:..\..\..\BSP/bsp.c ****     pb_status = DEF_BIT_IS_CLR(sw_val, DEF_BIT_00);             /* Check if 'SW2' was pressed. Acti
 517              		.loc 1 443 0
 518 0010 FB1D     		adds	r3, r7, #7
 519 0012 1B78     		ldrb	r3, [r3]
 520 0014 0122     		movs	r2, #1
 521 0016 1340     		ands	r3, r2
 522 0018 01D1     		bne	.L21
 523              		.loc 1 443 0 is_stmt 0 discriminator 1
 524 001a 0122     		movs	r2, #1
 525 001c 00E0     		b	.L22
 526              	.L21:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 18


 527              		.loc 1 443 0 discriminator 2
 528 001e 0022     		movs	r2, #0
 529              	.L22:
 530              		.loc 1 443 0 discriminator 4
 531 0020 BB1D     		adds	r3, r7, #6
 532 0022 1A70     		strb	r2, [r3]
 444:..\..\..\BSP/bsp.c **** 
 445:..\..\..\BSP/bsp.c ****     return (pb_status);
 533              		.loc 1 445 0 is_stmt 1 discriminator 4
 534 0024 BB1D     		adds	r3, r7, #6
 535 0026 1B78     		ldrb	r3, [r3]
 446:..\..\..\BSP/bsp.c **** }
 536              		.loc 1 446 0 discriminator 4
 537 0028 1800     		movs	r0, r3
 538 002a BD46     		mov	sp, r7
 539 002c 03B0     		add	sp, sp, #12
 540              		@ sp needed
 541 002e 90BD     		pop	{r4, r7, pc}
 542              		.cfi_endproc
 543              	.LFE41:
 544              		.size	BSP_PB_StatusGet, .-BSP_PB_StatusGet
 545              		.section	.text.BSP_Accel_Init,"ax",%progbits
 546              		.align	2
 547              		.global	BSP_Accel_Init
 548              		.code	16
 549              		.thumb_func
 550              		.type	BSP_Accel_Init, %function
 551              	BSP_Accel_Init:
 552              	.LFB42:
 447:..\..\..\BSP/bsp.c **** 
 448:..\..\..\BSP/bsp.c **** 
 449:..\..\..\BSP/bsp.c **** /*
 450:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 451:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 452:..\..\..\BSP/bsp.c **** *                                    ACCELEROMETER (I2C) FUNCTIONS
 453:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 454:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 455:..\..\..\BSP/bsp.c **** */
 456:..\..\..\BSP/bsp.c **** 
 457:..\..\..\BSP/bsp.c **** /*
 458:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 459:..\..\..\BSP/bsp.c **** *                                           BSP_Accel_Init()
 460:..\..\..\BSP/bsp.c **** *
 461:..\..\..\BSP/bsp.c **** * Description : Initialize the Accelerometer, connected via I2C communication, for proper operation
 462:..\..\..\BSP/bsp.c **** *
 463:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 464:..\..\..\BSP/bsp.c **** *
 465:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 466:..\..\..\BSP/bsp.c **** *
 467:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Init().
 468:..\..\..\BSP/bsp.c **** *
 469:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The Desired Wake Up Timer Counts should be Calculated using the following equat
 470:..\..\..\BSP/bsp.c **** *                       Counts = Desired Delay Time (sec) x ODR Period (Hz) [OWUF]
 471:..\..\..\BSP/bsp.c **** *
 472:..\..\..\BSP/bsp.c **** *                   Every Count is Calculated as 1/OWUF Delay Period.
 473:..\..\..\BSP/bsp.c **** *
 474:..\..\..\BSP/bsp.c **** *               (2) The Desired Wake Up Threshold Counts should be Calculated using the following e
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 19


 475:..\..\..\BSP/bsp.c **** *                       Threshold Counts = Desired Threshold (g) x 16 (counts/g)
 476:..\..\..\BSP/bsp.c **** *
 477:..\..\..\BSP/bsp.c **** *                   The Factory Setting of the value is set to a change in Acceleration of 0.5g
 478:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 479:..\..\..\BSP/bsp.c **** */
 480:..\..\..\BSP/bsp.c **** 
 481:..\..\..\BSP/bsp.c **** void  BSP_Accel_Init (void)
 482:..\..\..\BSP/bsp.c **** {
 553              		.loc 1 482 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 90B5     		push	{r4, r7, lr}
 558              		.cfi_def_cfa_offset 12
 559              		.cfi_offset 4, -12
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 83B0     		sub	sp, sp, #12
 563              		.cfi_def_cfa_offset 24
 564 0004 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 483:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_status;
 484:..\..\..\BSP/bsp.c ****     CPU_INT08U   data_resp;
 485:..\..\..\BSP/bsp.c ****     
 486:..\..\..\BSP/bsp.c ****                                                                 /* ----------- INIT I2C BLOCK & ISR
 487:..\..\..\BSP/bsp.c ****     I2C_Start();                                                /* Enable and Start the I2C Block f
 566              		.loc 1 487 0
 567 0006 FFF7FEFF 		bl	I2C_Start
 488:..\..\..\BSP/bsp.c ****     Accel_ISR_StartEx(BSP_Accel_ISR_Handler);                   /* Enable, Start, and Set the ISR H
 568              		.loc 1 488 0
 569 000a 374B     		ldr	r3, .L28
 570 000c 1800     		movs	r0, r3
 571 000e FFF7FEFF 		bl	Accel_ISR_StartEx
 489:..\..\..\BSP/bsp.c ****     
 490:..\..\..\BSP/bsp.c ****     BSP_OS_TimeDlyMs(50u);                                      /* Delay for 50ms to Allow the Acce
 572              		.loc 1 490 0
 573 0012 3220     		movs	r0, #50
 574 0014 FFF7FEFF 		bl	BSP_OS_TimeDlyMs
 491:..\..\..\BSP/bsp.c ****     
 492:..\..\..\BSP/bsp.c ****     accel_status = BSP_Accel_InitSelfTst();                     /* Run the Accel Self-Test to Ensur
 575              		.loc 1 492 0
 576 0018 FC1D     		adds	r4, r7, #7
 577 001a FFF7FEFF 		bl	BSP_Accel_InitSelfTst
 578 001e 0300     		movs	r3, r0
 579 0020 2370     		strb	r3, [r4]
 493:..\..\..\BSP/bsp.c ****     if (accel_status != DEF_OK) {
 580              		.loc 1 493 0
 581 0022 FB1D     		adds	r3, r7, #7
 582 0024 1B78     		ldrb	r3, [r3]
 583 0026 012B     		cmp	r3, #1
 584 0028 59D1     		bne	.L27
 494:..\..\..\BSP/bsp.c ****         return;                                                 /* Error Checking, if Self Test Fai
 495:..\..\..\BSP/bsp.c ****     }
 496:..\..\..\BSP/bsp.c ****                                                                 /* ------------- SET CONTROL REG 1 
 497:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_CTRL_REG1_RES      |             /* CTRL_REG1: High Current 12-Bit/1
 585              		.loc 1 497 0
 586 002a BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 20


 587 002c 6222     		movs	r2, #98
 588 002e 1A70     		strb	r2, [r3]
 498:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_DRDYE    |             /*          : Reflect New Accel Dat
 499:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_GSELx_2G |             /*          : Acceleration Range of
 500:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_WUFE     );            /*          : Wake Up on Motion Det
 501:..\..\..\BSP/bsp.c ****                                                                 /*          : Set Stand-By Mode. (B
 502:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Control Register #1 Se
 589              		.loc 1 502 0
 590 0030 BB1D     		adds	r3, r7, #6
 591 0032 1A00     		movs	r2, r3
 592 0034 1B21     		movs	r1, #27
 593 0036 0020     		movs	r0, #0
 594 0038 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 503:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 504:..\..\..\BSP/bsp.c ****                       &data_resp);
 505:..\..\..\BSP/bsp.c ****                                                                 /* ------------- SET CONTROL REG 2 
 506:..\..\..\BSP/bsp.c ****     data_resp =  BSP_ACC_KXTJ2_CTRL_REG2_OWUFx_12_5Hz;          /* CTRL_REG2: Wake Up Fnct Output D
 595              		.loc 1 506 0
 596 003c BB1D     		adds	r3, r7, #6
 597 003e 0422     		movs	r2, #4
 598 0040 1A70     		strb	r2, [r3]
 507:..\..\..\BSP/bsp.c ****                                                                 /*          : DISABLE Software Rese
 508:..\..\..\BSP/bsp.c ****                                                                 /*          : Do Not Perform Self-T
 509:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Control Register #2 Se
 599              		.loc 1 509 0
 600 0042 BB1D     		adds	r3, r7, #6
 601 0044 1A00     		movs	r2, r3
 602 0046 1D21     		movs	r1, #29
 603 0048 0020     		movs	r0, #0
 604 004a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 510:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 511:..\..\..\BSP/bsp.c ****                       &data_resp);
 512:..\..\..\BSP/bsp.c ****                                                                 /* ----------- SET INTERRUPT CONTRO
 513:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_INT_CTRL_REG1_IEN |              /* INT_CTRL1: ENABLE Interrupt Pin.
 605              		.loc 1 513 0
 606 004e BB1D     		adds	r3, r7, #6
 607 0050 3022     		movs	r2, #48
 608 0052 1A70     		strb	r2, [r3]
 514:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG1_IEA );             /*          : Interrupt Polarity, A
 515:..\..\..\BSP/bsp.c ****                                                                 /*          : Interrupt Latches Unt
 516:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Interrupt Control Regi
 609              		.loc 1 516 0
 610 0054 BB1D     		adds	r3, r7, #6
 611 0056 1A00     		movs	r2, r3
 612 0058 1E21     		movs	r1, #30
 613 005a 0020     		movs	r0, #0
 614 005c FFF7FEFF 		bl	BSP_Accel_RegRdWr
 517:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_CTRL_REG1,
 518:..\..\..\BSP/bsp.c ****                       &data_resp);
 519:..\..\..\BSP/bsp.c ****     
 520:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_INT_CTRL_REG2_XNWUE |            /* INT_CTRL2: Enable Interrupt Moti
 615              		.loc 1 520 0
 616 0060 BB1D     		adds	r3, r7, #6
 617 0062 3F22     		movs	r2, #63
 618 0064 1A70     		strb	r2, [r3]
 521:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_XPWUE |            /*          :                      
 522:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_YNWUE |            /*          :                      
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 21


 523:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_YPWUE |            /*          :                      
 524:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_ZNWUE |            /*          :                      
 525:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_ZPWUE );           /*          :                      
 526:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Interrupt Control Regi
 619              		.loc 1 526 0
 620 0066 BB1D     		adds	r3, r7, #6
 621 0068 1A00     		movs	r2, r3
 622 006a 1F21     		movs	r1, #31
 623 006c 0020     		movs	r0, #0
 624 006e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 527:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_CTRL_REG2,
 528:..\..\..\BSP/bsp.c ****                       &data_resp);
 529:..\..\..\BSP/bsp.c ****                                                                 /* --------------- DATA CONTROL OPT
 530:..\..\..\BSP/bsp.c ****     data_resp =  BSP_ACC_KXTJ2_DATA_CTRL_OSAx_50Hz;             /* DATA_CTRL_REG: Set Accel Output 
 625              		.loc 1 530 0
 626 0072 BB1D     		adds	r3, r7, #6
 627 0074 0222     		movs	r2, #2
 628 0076 1A70     		strb	r2, [r3]
 531:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Data Control Register 
 629              		.loc 1 531 0
 630 0078 BB1D     		adds	r3, r7, #6
 631 007a 1A00     		movs	r2, r3
 632 007c 2121     		movs	r1, #33
 633 007e 0020     		movs	r0, #0
 634 0080 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 532:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_DATA_CTRL_REG,
 533:..\..\..\BSP/bsp.c ****                       &data_resp);
 534:..\..\..\BSP/bsp.c ****                                                                 /* ------------------ WAKEUP OPTION
 535:..\..\..\BSP/bsp.c ****     data_resp = BSP_ACCEL_WAKEUP_CNTS;                          /* Set the Wake Up Timer Counts. Se
 635              		.loc 1 535 0
 636 0084 BB1D     		adds	r3, r7, #6
 637 0086 3222     		movs	r2, #50
 638 0088 1A70     		strb	r2, [r3]
 536:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Wakeup Timer Register 
 639              		.loc 1 536 0
 640 008a BB1D     		adds	r3, r7, #6
 641 008c 1A00     		movs	r2, r3
 642 008e 2921     		movs	r1, #41
 643 0090 0020     		movs	r0, #0
 644 0092 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 537:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_WAKEUP_TIMER,
 538:..\..\..\BSP/bsp.c ****                       &data_resp);
 539:..\..\..\BSP/bsp.c ****     
 540:..\..\..\BSP/bsp.c ****     data_resp = BSP_ACCEL_WAKEUP_THRESH_CNTS;                   /* Set the Wake Up Threshold Counts
 645              		.loc 1 540 0
 646 0096 BB1D     		adds	r3, r7, #6
 647 0098 0822     		movs	r2, #8
 648 009a 1A70     		strb	r2, [r3]
 541:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Wakeup Threshold Regis
 649              		.loc 1 541 0
 650 009c BB1D     		adds	r3, r7, #6
 651 009e 1A00     		movs	r2, r3
 652 00a0 6A21     		movs	r1, #106
 653 00a2 0020     		movs	r0, #0
 654 00a4 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 542:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_WAKUP_THRESHOLD,
 543:..\..\..\BSP/bsp.c ****                       &data_resp);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 22


 544:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- START ACCELEROM
 545:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get Control Register #1 Current 
 655              		.loc 1 545 0
 656 00a8 BB1D     		adds	r3, r7, #6
 657 00aa 1A00     		movs	r2, r3
 658 00ac 1B21     		movs	r1, #27
 659 00ae 0120     		movs	r0, #1
 660 00b0 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 546:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 547:..\..\..\BSP/bsp.c ****                       &data_resp);
 548:..\..\..\BSP/bsp.c ****     
 549:..\..\..\BSP/bsp.c ****     DEF_BIT_SET(data_resp, BSP_ACC_KXTJ2_CTRL_REG1_PC1);        /* Clear PC1 Bit to set KXTJ2 Modul
 661              		.loc 1 549 0
 662 00b4 BB1D     		adds	r3, r7, #6
 663 00b6 1B78     		ldrb	r3, [r3]
 664 00b8 8022     		movs	r2, #128
 665 00ba 5242     		rsbs	r2, r2, #0
 666 00bc 1343     		orrs	r3, r2
 667 00be DAB2     		uxtb	r2, r3
 668 00c0 BB1D     		adds	r3, r7, #6
 669 00c2 1A70     		strb	r2, [r3]
 550:..\..\..\BSP/bsp.c ****     
 551:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 670              		.loc 1 551 0
 671 00c4 BB1D     		adds	r3, r7, #6
 672 00c6 1A00     		movs	r2, r3
 673 00c8 1B21     		movs	r1, #27
 674 00ca 0020     		movs	r0, #0
 675 00cc FFF7FEFF 		bl	BSP_Accel_RegRdWr
 552:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 553:..\..\..\BSP/bsp.c ****                       &data_resp);
 554:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- CLR PENDING IN
 555:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read INT_REL to Clear any Int Sr
 676              		.loc 1 555 0
 677 00d0 BB1D     		adds	r3, r7, #6
 678 00d2 1A00     		movs	r2, r3
 679 00d4 1A21     		movs	r1, #26
 680 00d6 0120     		movs	r0, #1
 681 00d8 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 682 00dc 00E0     		b	.L24
 683              	.L27:
 494:..\..\..\BSP/bsp.c ****     }
 684              		.loc 1 494 0
 685 00de C046     		nop
 686              	.L24:
 556:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_REL,
 557:..\..\..\BSP/bsp.c ****                       &data_resp);
 558:..\..\..\BSP/bsp.c **** }
 687              		.loc 1 558 0
 688 00e0 BD46     		mov	sp, r7
 689 00e2 03B0     		add	sp, sp, #12
 690              		@ sp needed
 691 00e4 90BD     		pop	{r4, r7, pc}
 692              	.L29:
 693 00e6 C046     		.align	2
 694              	.L28:
 695 00e8 00000000 		.word	BSP_Accel_ISR_Handler
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 23


 696              		.cfi_endproc
 697              	.LFE42:
 698              		.size	BSP_Accel_Init, .-BSP_Accel_Init
 699              		.section	.text.BSP_Accel_InitSelfTst,"ax",%progbits
 700              		.align	2
 701              		.code	16
 702              		.thumb_func
 703              		.type	BSP_Accel_InitSelfTst, %function
 704              	BSP_Accel_InitSelfTst:
 705              	.LFB43:
 559:..\..\..\BSP/bsp.c **** 
 560:..\..\..\BSP/bsp.c **** 
 561:..\..\..\BSP/bsp.c **** /*
 562:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 563:..\..\..\BSP/bsp.c **** *                                       BSP_Accel_InitSelfTst()
 564:..\..\..\BSP/bsp.c **** *
 565:..\..\..\BSP/bsp.c **** * Description : Runs a Test Routine to make sure the Accelerometer Communication is Functional at I
 566:..\..\..\BSP/bsp.c **** *
 567:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 568:..\..\..\BSP/bsp.c **** *
 569:..\..\..\BSP/bsp.c **** * Return(s)   : I2C Communication Status
 570:..\..\..\BSP/bsp.c **** *                   - DEF_FAIL: If Error in I2C Communication Sequence.
 571:..\..\..\BSP/bsp.c **** *                   - DEF_OK  : Otherwise, Everything went OK.
 572:..\..\..\BSP/bsp.c **** *
 573:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Accel_Init()
 574:..\..\..\BSP/bsp.c **** *
 575:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 576:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 577:..\..\..\BSP/bsp.c **** */
 578:..\..\..\BSP/bsp.c **** 
 579:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_Accel_InitSelfTst (void)
 580:..\..\..\BSP/bsp.c **** {
 706              		.loc 1 580 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 8
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 90B5     		push	{r4, r7, lr}
 711              		.cfi_def_cfa_offset 12
 712              		.cfi_offset 4, -12
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 83B0     		sub	sp, sp, #12
 716              		.cfi_def_cfa_offset 24
 717 0004 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 581:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  test_status;
 582:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_resp;
 583:..\..\..\BSP/bsp.c ****     CPU_INT08U   data_resp;
 584:..\..\..\BSP/bsp.c ****     
 585:..\..\..\BSP/bsp.c ****                                                                 /* ------------ MODULE/CIRCUIT VERI
 586:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg to verify proper C
 719              		.loc 1 586 0
 720 0006 FC1D     		adds	r4, r7, #7
 721 0008 BB1D     		adds	r3, r7, #6
 722 000a 1A00     		movs	r2, r3
 723 000c 0C21     		movs	r1, #12
 724 000e 0120     		movs	r0, #1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 24


 725 0010 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 726 0014 0300     		movs	r3, r0
 727 0016 2370     		strb	r3, [r4]
 587:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 588:..\..\..\BSP/bsp.c ****                                    &data_resp);
 589:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 728              		.loc 1 589 0
 729 0018 FB1D     		adds	r3, r7, #7
 730 001a 1B78     		ldrb	r3, [r3]
 731 001c 012B     		cmp	r3, #1
 732 001e 03D1     		bne	.L31
 590:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 733              		.loc 1 590 0 discriminator 1
 734 0020 BB1D     		adds	r3, r7, #6
 735 0022 1B78     		ldrb	r3, [r3]
 589:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 736              		.loc 1 589 0 discriminator 1
 737 0024 552B     		cmp	r3, #85
 738 0026 01D0     		beq	.L32
 739              	.L31:
 591:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #1, then Continue with S
 740              		.loc 1 591 0
 741 0028 0023     		movs	r3, #0
 742 002a 4CE0     		b	.L38
 743              	.L32:
 592:..\..\..\BSP/bsp.c ****     }
 593:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET OPERATING M
 594:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get current Control Register #1 
 744              		.loc 1 594 0
 745 002c BB1D     		adds	r3, r7, #6
 746 002e 1A00     		movs	r2, r3
 747 0030 1B21     		movs	r1, #27
 748 0032 0120     		movs	r0, #1
 749 0034 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 595:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 596:..\..\..\BSP/bsp.c ****                       &data_resp);
 597:..\..\..\BSP/bsp.c ****     
 598:..\..\..\BSP/bsp.c ****     DEF_BIT_CLR(data_resp, BSP_ACC_KXTJ2_CTRL_REG1_PC1);        /* Clear PC1 Bit to set KXTJ2 Modul
 750              		.loc 1 598 0
 751 0038 BB1D     		adds	r3, r7, #6
 752 003a 1B78     		ldrb	r3, [r3]
 753 003c 7F22     		movs	r2, #127
 754 003e 1340     		ands	r3, r2
 755 0040 DAB2     		uxtb	r2, r3
 756 0042 BB1D     		adds	r3, r7, #6
 757 0044 1A70     		strb	r2, [r3]
 599:..\..\..\BSP/bsp.c ****     
 600:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 758              		.loc 1 600 0
 759 0046 BB1D     		adds	r3, r7, #6
 760 0048 1A00     		movs	r2, r3
 761 004a 1B21     		movs	r1, #27
 762 004c 0020     		movs	r0, #0
 763 004e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 601:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 602:..\..\..\BSP/bsp.c ****                       &data_resp);
 603:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- PERFORM SELF-T
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 25


 604:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get current Control Register #2 
 764              		.loc 1 604 0
 765 0052 BB1D     		adds	r3, r7, #6
 766 0054 1A00     		movs	r2, r3
 767 0056 1D21     		movs	r1, #29
 768 0058 0120     		movs	r0, #1
 769 005a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 605:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 606:..\..\..\BSP/bsp.c ****                       &data_resp);
 607:..\..\..\BSP/bsp.c ****     
 608:..\..\..\BSP/bsp.c ****     DEF_BIT_SET(data_resp, BSP_ACC_KXTJ2_CTRL_REG2_DCST);       /* Set the DCST Bit to Perform the 
 770              		.loc 1 608 0
 771 005e BB1D     		adds	r3, r7, #6
 772 0060 1B78     		ldrb	r3, [r3]
 773 0062 1022     		movs	r2, #16
 774 0064 1343     		orrs	r3, r2
 775 0066 DAB2     		uxtb	r2, r3
 776 0068 BB1D     		adds	r3, r7, #6
 777 006a 1A70     		strb	r2, [r3]
 609:..\..\..\BSP/bsp.c ****     
 610:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 778              		.loc 1 610 0
 779 006c BB1D     		adds	r3, r7, #6
 780 006e 1A00     		movs	r2, r3
 781 0070 1D21     		movs	r1, #29
 782 0072 0020     		movs	r0, #0
 783 0074 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 611:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 612:..\..\..\BSP/bsp.c ****                       &data_resp);
 613:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- STATUS CHECK
 614:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg to Confirm Self-Te
 784              		.loc 1 614 0
 785 0078 FC1D     		adds	r4, r7, #7
 786 007a BB1D     		adds	r3, r7, #6
 787 007c 1A00     		movs	r2, r3
 788 007e 0C21     		movs	r1, #12
 789 0080 0120     		movs	r0, #1
 790 0082 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 791 0086 0300     		movs	r3, r0
 792 0088 2370     		strb	r3, [r4]
 615:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 616:..\..\..\BSP/bsp.c ****                                    &data_resp);
 617:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 793              		.loc 1 617 0
 794 008a FB1D     		adds	r3, r7, #7
 795 008c 1B78     		ldrb	r3, [r3]
 796 008e 012B     		cmp	r3, #1
 797 0090 03D1     		bne	.L34
 618:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_2)) {            /* If Communication was OK & Data R
 798              		.loc 1 618 0 discriminator 1
 799 0092 BB1D     		adds	r3, r7, #6
 800 0094 1B78     		ldrb	r3, [r3]
 617:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_2)) {            /* If Communication was OK & Data R
 801              		.loc 1 617 0 discriminator 1
 802 0096 AA2B     		cmp	r3, #170
 803 0098 01D0     		beq	.L35
 804              	.L34:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 26


 619:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #2, then Continue with S
 805              		.loc 1 619 0
 806 009a 0023     		movs	r3, #0
 807 009c 13E0     		b	.L38
 808              	.L35:
 620:..\..\..\BSP/bsp.c ****     }
 621:..\..\..\BSP/bsp.c ****     
 622:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg Once More, Value M
 809              		.loc 1 622 0
 810 009e FC1D     		adds	r4, r7, #7
 811 00a0 BB1D     		adds	r3, r7, #6
 812 00a2 1A00     		movs	r2, r3
 813 00a4 0C21     		movs	r1, #12
 814 00a6 0120     		movs	r0, #1
 815 00a8 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 816 00ac 0300     		movs	r3, r0
 817 00ae 2370     		strb	r3, [r4]
 623:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 624:..\..\..\BSP/bsp.c ****                                    &data_resp);
 625:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 818              		.loc 1 625 0
 819 00b0 FB1D     		adds	r3, r7, #7
 820 00b2 1B78     		ldrb	r3, [r3]
 821 00b4 012B     		cmp	r3, #1
 822 00b6 03D1     		bne	.L36
 626:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 823              		.loc 1 626 0 discriminator 1
 824 00b8 BB1D     		adds	r3, r7, #6
 825 00ba 1B78     		ldrb	r3, [r3]
 625:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 826              		.loc 1 625 0 discriminator 1
 827 00bc 552B     		cmp	r3, #85
 828 00be 01D0     		beq	.L37
 829              	.L36:
 627:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #1, then end the Init Se
 830              		.loc 1 627 0
 831 00c0 0023     		movs	r3, #0
 832 00c2 00E0     		b	.L38
 833              	.L37:
 628:..\..\..\BSP/bsp.c ****     }
 629:..\..\..\BSP/bsp.c ****     
 630:..\..\..\BSP/bsp.c ****     return (DEF_OK);
 834              		.loc 1 630 0
 835 00c4 0123     		movs	r3, #1
 836              	.L38:
 631:..\..\..\BSP/bsp.c **** }
 837              		.loc 1 631 0 discriminator 1
 838 00c6 1800     		movs	r0, r3
 839 00c8 BD46     		mov	sp, r7
 840 00ca 03B0     		add	sp, sp, #12
 841              		@ sp needed
 842 00cc 90BD     		pop	{r4, r7, pc}
 843              		.cfi_endproc
 844              	.LFE43:
 845              		.size	BSP_Accel_InitSelfTst, .-BSP_Accel_InitSelfTst
 846 00ce C046     		.section	.text.BSP_Accel_RegRdWr,"ax",%progbits
 847              		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 27


 848              		.code	16
 849              		.thumb_func
 850              		.type	BSP_Accel_RegRdWr, %function
 851              	BSP_Accel_RegRdWr:
 852              	.LFB44:
 632:..\..\..\BSP/bsp.c **** 
 633:..\..\..\BSP/bsp.c **** 
 634:..\..\..\BSP/bsp.c **** /*
 635:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 636:..\..\..\BSP/bsp.c **** *                                         BSP_Accel_RegRdWr()
 637:..\..\..\BSP/bsp.c **** *
 638:..\..\..\BSP/bsp.c **** * Description : Read or Write a Byte from a specific Register location via I2C Communication.
 639:..\..\..\BSP/bsp.c **** *
 640:..\..\..\BSP/bsp.c **** * Argument(s) : rd_wr       Direction Status Flag:
 641:..\..\..\BSP/bsp.c **** *                               - BSP_KXTJ2_DIR_WRITE: Write a Data Byte
 642:..\..\..\BSP/bsp.c **** *                               - BSP_KXTJ2_DIR_READ : Read  a Data Byte
 643:..\..\..\BSP/bsp.c **** *
 644:..\..\..\BSP/bsp.c **** *               reg         Address of Desired Register to either Read or Write from.
 645:..\..\..\BSP/bsp.c **** *
 646:..\..\..\BSP/bsp.c **** *               value       When Writing: The Value Desired Byte to Write.
 647:..\..\..\BSP/bsp.c **** *                           When Reading: The Location to Store the Read Byte.
 648:..\..\..\BSP/bsp.c **** *
 649:..\..\..\BSP/bsp.c **** * Return(s)   : I2C Communication Status
 650:..\..\..\BSP/bsp.c **** *                   - DEF_FAIL: If Error in I2C Communication Sequence.
 651:..\..\..\BSP/bsp.c **** *                   - DEF_OK  : Otherwise, Everything went OK.
 652:..\..\..\BSP/bsp.c **** *
 653:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Accel_Init().
 654:..\..\..\BSP/bsp.c **** *               BSP_Accel_InitSelfTst().
 655:..\..\..\BSP/bsp.c **** *               BSP_Accel_Rd().
 656:..\..\..\BSP/bsp.c **** *
 657:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 658:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 659:..\..\..\BSP/bsp.c **** */
 660:..\..\..\BSP/bsp.c **** 
 661:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_Accel_RegRdWr (BSP_KXTJ2_DATA_DIR   rd_wr,
 662:..\..\..\BSP/bsp.c ****                                 CPU_INT08U           reg,
 663:..\..\..\BSP/bsp.c ****                                 CPU_INT08U          *value)
 664:..\..\..\BSP/bsp.c **** {
 853              		.loc 1 664 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 16
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 0000 80B5     		push	{r7, lr}
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 84B0     		sub	sp, sp, #16
 862              		.cfi_def_cfa_offset 24
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 3A60     		str	r2, [r7]
 866 0008 FB1D     		adds	r3, r7, #7
 867 000a 021C     		adds	r2, r0, #0
 868 000c 1A70     		strb	r2, [r3]
 869 000e BB1D     		adds	r3, r7, #6
 870 0010 0A1C     		adds	r2, r1, #0
 871 0012 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 28


 665:..\..\..\BSP/bsp.c ****     CPU_INT08U   i2c_status;
 666:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_status;
 667:..\..\..\BSP/bsp.c ****     
 668:..\..\..\BSP/bsp.c ****     /* ------------- START SEQUENCE CONDITION ------------- */
 669:..\..\..\BSP/bsp.c ****     i2c_status = I2C_I2CMasterSendStart(BSP_I2C_KXTJ2_ACC_SLV_ADDR, BSP_KXTJ2_DIR_WRITE,1000);//zzn
 872              		.loc 1 669 0
 873 0014 FA23     		movs	r3, #250
 874 0016 9B00     		lsls	r3, r3, #2
 875 0018 1A00     		movs	r2, r3
 876 001a 0021     		movs	r1, #0
 877 001c 0F20     		movs	r0, #15
 878 001e FFF7FEFF 		bl	I2C_I2CMasterSendStart
 879 0022 0200     		movs	r2, r0
 880 0024 0E23     		movs	r3, #14
 881 0026 FB18     		adds	r3, r7, r3
 882 0028 1A70     		strb	r2, [r3]
 670:..\..\..\BSP/bsp.c ****     if (i2c_status == I2C_I2C_MSTR_NO_ERROR) {                  /* Sequence Start Successful, Perfo
 883              		.loc 1 670 0
 884 002a 0E23     		movs	r3, #14
 885 002c FB18     		adds	r3, r7, r3
 886 002e 1B78     		ldrb	r3, [r3]
 887 0030 002B     		cmp	r3, #0
 888 0032 41D1     		bne	.L40
 671:..\..\..\BSP/bsp.c ****         i2c_status = I2C_I2CMasterWriteByte(reg,1000); //zzn              /* Select Register Addres
 889              		.loc 1 671 0
 890 0034 BB1D     		adds	r3, r7, #6
 891 0036 1A78     		ldrb	r2, [r3]
 892 0038 FA23     		movs	r3, #250
 893 003a 9B00     		lsls	r3, r3, #2
 894 003c 1900     		movs	r1, r3
 895 003e 1000     		movs	r0, r2
 896 0040 FFF7FEFF 		bl	I2C_I2CMasterWriteByte
 897 0044 0200     		movs	r2, r0
 898 0046 0E23     		movs	r3, #14
 899 0048 FB18     		adds	r3, r7, r3
 900 004a 1A70     		strb	r2, [r3]
 672:..\..\..\BSP/bsp.c ****         
 673:..\..\..\BSP/bsp.c ****         if (rd_wr == BSP_KXTJ2_DIR_WRITE) {                     /* -------------------- WRITE DATA 
 901              		.loc 1 673 0
 902 004c FB1D     		adds	r3, r7, #7
 903 004e 1B78     		ldrb	r3, [r3]
 904 0050 002B     		cmp	r3, #0
 905 0052 11D1     		bne	.L41
 674:..\..\..\BSP/bsp.c ****             i2c_status   = I2C_I2CMasterWriteByte(*value,1000); //zzn     /* Write Data Byte to the
 906              		.loc 1 674 0
 907 0054 3B68     		ldr	r3, [r7]
 908 0056 1B78     		ldrb	r3, [r3]
 909 0058 1A00     		movs	r2, r3
 910 005a FA23     		movs	r3, #250
 911 005c 9B00     		lsls	r3, r3, #2
 912 005e 1900     		movs	r1, r3
 913 0060 1000     		movs	r0, r2
 914 0062 FFF7FEFF 		bl	I2C_I2CMasterWriteByte
 915 0066 0200     		movs	r2, r0
 916 0068 0E23     		movs	r3, #14
 917 006a FB18     		adds	r3, r7, r3
 918 006c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 29


 675:..\..\..\BSP/bsp.c ****             accel_status = DEF_OK;
 919              		.loc 1 675 0
 920 006e 0F23     		movs	r3, #15
 921 0070 FB18     		adds	r3, r7, r3
 922 0072 0122     		movs	r2, #1
 923 0074 1A70     		strb	r2, [r3]
 924 0076 23E0     		b	.L44
 925              	.L41:
 676:..\..\..\BSP/bsp.c ****             
 677:..\..\..\BSP/bsp.c ****         } else if (rd_wr == BSP_KXTJ2_DIR_READ) {               /* --------------------- READ DATA 
 926              		.loc 1 677 0
 927 0078 FB1D     		adds	r3, r7, #7
 928 007a 1B78     		ldrb	r3, [r3]
 929 007c 012B     		cmp	r3, #1
 930 007e 16D1     		bne	.L43
 678:..\..\..\BSP/bsp.c ****                                                                 /* Restart Start Condition to Read 
 679:..\..\..\BSP/bsp.c ****             i2c_status   = I2C_I2CMasterSendRestart(BSP_I2C_KXTJ2_ACC_SLV_ADDR,
 931              		.loc 1 679 0
 932 0080 FA23     		movs	r3, #250
 933 0082 9B00     		lsls	r3, r3, #2
 934 0084 1A00     		movs	r2, r3
 935 0086 0121     		movs	r1, #1
 936 0088 0F20     		movs	r0, #15
 937 008a FFF7FEFF 		bl	I2C_I2CMasterSendRestart
 938 008e 0200     		movs	r2, r0
 939 0090 0E23     		movs	r3, #14
 940 0092 FB18     		adds	r3, r7, r3
 941 0094 1A70     		strb	r2, [r3]
 680:..\..\..\BSP/bsp.c ****                                                     BSP_KXTJ2_DIR_READ,1000); //zzn
 681:..\..\..\BSP/bsp.c ****                                                                 /* Read Data Byte from Register, Re
 682:..\..\..\BSP/bsp.c **** //           *value        = I2C_I2CMasterReadByte(I2C_I2C_NAK_DATA);
 683:..\..\..\BSP/bsp.c ****             I2C_I2CMasterReadByte(I2C_I2C_NAK_DATA,value,1000); //zzn
 942              		.loc 1 683 0
 943 0096 FA23     		movs	r3, #250
 944 0098 9A00     		lsls	r2, r3, #2
 945 009a 3B68     		ldr	r3, [r7]
 946 009c 1900     		movs	r1, r3
 947 009e 0120     		movs	r0, #1
 948 00a0 FFF7FEFF 		bl	I2C_I2CMasterReadByte
 684:..\..\..\BSP/bsp.c ****             accel_status = DEF_OK;
 949              		.loc 1 684 0
 950 00a4 0F23     		movs	r3, #15
 951 00a6 FB18     		adds	r3, r7, r3
 952 00a8 0122     		movs	r2, #1
 953 00aa 1A70     		strb	r2, [r3]
 954 00ac 08E0     		b	.L44
 955              	.L43:
 685:..\..\..\BSP/bsp.c ****             
 686:..\..\..\BSP/bsp.c ****         } else {
 687:..\..\..\BSP/bsp.c ****             accel_status = DEF_FAIL;                            /* Wrong Direction, Either Read or 
 956              		.loc 1 687 0
 957 00ae 0F23     		movs	r3, #15
 958 00b0 FB18     		adds	r3, r7, r3
 959 00b2 0022     		movs	r2, #0
 960 00b4 1A70     		strb	r2, [r3]
 961 00b6 03E0     		b	.L44
 962              	.L40:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 30


 688:..\..\..\BSP/bsp.c ****         }
 689:..\..\..\BSP/bsp.c ****     } else {                                                    /* Sequence Start Failed, Return wi
 690:..\..\..\BSP/bsp.c ****         accel_status = DEF_FAIL;
 963              		.loc 1 690 0
 964 00b8 0F23     		movs	r3, #15
 965 00ba FB18     		adds	r3, r7, r3
 966 00bc 0022     		movs	r2, #0
 967 00be 1A70     		strb	r2, [r3]
 968              	.L44:
 691:..\..\..\BSP/bsp.c ****     }
 692:..\..\..\BSP/bsp.c ****                                                                 /* -------------- STOP SEQUENCE CON
 693:..\..\..\BSP/bsp.c ****     i2c_status = I2C_I2CMasterSendStop(1000);  //zzn                     /* Send the Stop Condition
 969              		.loc 1 693 0
 970 00c0 FA23     		movs	r3, #250
 971 00c2 9B00     		lsls	r3, r3, #2
 972 00c4 1800     		movs	r0, r3
 973 00c6 FFF7FEFF 		bl	I2C_I2CMasterSendStop
 974 00ca 0200     		movs	r2, r0
 975 00cc 0E23     		movs	r3, #14
 976 00ce FB18     		adds	r3, r7, r3
 977 00d0 1A70     		strb	r2, [r3]
 694:..\..\..\BSP/bsp.c ****     if (i2c_status != I2C_I2C_MSTR_NO_ERROR) {                  /* Sequence Failed to Stopped, Retu
 978              		.loc 1 694 0
 979 00d2 0E23     		movs	r3, #14
 980 00d4 FB18     		adds	r3, r7, r3
 981 00d6 1B78     		ldrb	r3, [r3]
 982 00d8 002B     		cmp	r3, #0
 983 00da 03D0     		beq	.L45
 695:..\..\..\BSP/bsp.c ****         accel_status = DEF_FAIL;
 984              		.loc 1 695 0
 985 00dc 0F23     		movs	r3, #15
 986 00de FB18     		adds	r3, r7, r3
 987 00e0 0022     		movs	r2, #0
 988 00e2 1A70     		strb	r2, [r3]
 989              	.L45:
 696:..\..\..\BSP/bsp.c ****     }
 697:..\..\..\BSP/bsp.c ****     
 698:..\..\..\BSP/bsp.c ****     return (accel_status);
 990              		.loc 1 698 0
 991 00e4 0F23     		movs	r3, #15
 992 00e6 FB18     		adds	r3, r7, r3
 993 00e8 1B78     		ldrb	r3, [r3]
 699:..\..\..\BSP/bsp.c **** }
 994              		.loc 1 699 0
 995 00ea 1800     		movs	r0, r3
 996 00ec BD46     		mov	sp, r7
 997 00ee 04B0     		add	sp, sp, #16
 998              		@ sp needed
 999 00f0 80BD     		pop	{r7, pc}
 1000              		.cfi_endproc
 1001              	.LFE44:
 1002              		.size	BSP_Accel_RegRdWr, .-BSP_Accel_RegRdWr
 1003 00f2 C046     		.section	.text.BSP_Accel_Rd,"ax",%progbits
 1004              		.align	2
 1005              		.global	BSP_Accel_Rd
 1006              		.code	16
 1007              		.thumb_func
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 31


 1008              		.type	BSP_Accel_Rd, %function
 1009              	BSP_Accel_Rd:
 1010              	.LFB45:
 700:..\..\..\BSP/bsp.c **** 
 701:..\..\..\BSP/bsp.c **** 
 702:..\..\..\BSP/bsp.c **** /*
 703:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 704:..\..\..\BSP/bsp.c **** *                                            BSP_Accel_Rd()
 705:..\..\..\BSP/bsp.c **** *
 706:..\..\..\BSP/bsp.c **** * Description : Reads the Accelerometer's Acceleration Values in the X, Y, and Z Directions.
 707:..\..\..\BSP/bsp.c **** *
 708:..\..\..\BSP/bsp.c **** * Argument(s) : x_axis      Variable in where the X-Direction's Acceleration Data will be Stored.
 709:..\..\..\BSP/bsp.c **** *
 710:..\..\..\BSP/bsp.c **** *               y_axis      Variable in where the Y-Direction's Acceleration Data will be Stored.
 711:..\..\..\BSP/bsp.c **** *
 712:..\..\..\BSP/bsp.c **** *               z_axis      Variable in where the Z-Direction's Acceleration Data will be Stored.
 713:..\..\..\BSP/bsp.c **** *
 714:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 715:..\..\..\BSP/bsp.c **** *
 716:..\..\..\BSP/bsp.c **** * Caller(s)   : Application
 717:..\..\..\BSP/bsp.c **** *
 718:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 719:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 720:..\..\..\BSP/bsp.c **** */
 721:..\..\..\BSP/bsp.c **** 
 722:..\..\..\BSP/bsp.c **** void  BSP_Accel_Rd (CPU_INT16S  *x_axis,
 723:..\..\..\BSP/bsp.c ****                     CPU_INT16S  *y_axis,
 724:..\..\..\BSP/bsp.c ****                     CPU_INT16S  *z_axis)
 725:..\..\..\BSP/bsp.c **** {
 1011              		.loc 1 725 0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 24
 1014              		@ frame_needed = 1, uses_anonymous_args = 0
 1015 0000 80B5     		push	{r7, lr}
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 7, -8
 1018              		.cfi_offset 14, -4
 1019 0002 86B0     		sub	sp, sp, #24
 1020              		.cfi_def_cfa_offset 32
 1021 0004 00AF     		add	r7, sp, #0
 1022              		.cfi_def_cfa_register 7
 1023 0006 F860     		str	r0, [r7, #12]
 1024 0008 B960     		str	r1, [r7, #8]
 1025 000a 7A60     		str	r2, [r7, #4]
 726:..\..\..\BSP/bsp.c ****     CPU_INT16S  axis_val;
 727:..\..\..\BSP/bsp.c ****     CPU_INT08U  data_resp;
 728:..\..\..\BSP/bsp.c ****     
 729:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ X-AXIS DA
 730:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the X-Axis HIGH Register fo
 1026              		.loc 1 730 0
 1027 000c 1523     		movs	r3, #21
 1028 000e FB18     		adds	r3, r7, r3
 1029 0010 1A00     		movs	r2, r3
 1030 0012 0721     		movs	r1, #7
 1031 0014 0120     		movs	r0, #1
 1032 0016 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 731:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_XOUT_H,
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 32


 732:..\..\..\BSP/bsp.c ****                       &data_resp);
 733:..\..\..\BSP/bsp.c ****     
 734:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place X-Axis TOP Half Value onto
 1033              		.loc 1 734 0
 1034 001a 1523     		movs	r3, #21
 1035 001c FB18     		adds	r3, r7, r3
 1036 001e 1B78     		ldrb	r3, [r3]
 1037 0020 1A02     		lsls	r2, r3, #8
 1038 0022 1623     		movs	r3, #22
 1039 0024 FB18     		adds	r3, r7, r3
 1040 0026 1A80     		strh	r2, [r3]
 735:..\..\..\BSP/bsp.c **** 
 736:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the X-Axis LOW  Register fo
 1041              		.loc 1 736 0
 1042 0028 1523     		movs	r3, #21
 1043 002a FB18     		adds	r3, r7, r3
 1044 002c 1A00     		movs	r2, r3
 1045 002e 0621     		movs	r1, #6
 1046 0030 0120     		movs	r0, #1
 1047 0032 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 737:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_XOUT_L,
 738:..\..\..\BSP/bsp.c ****                       &data_resp);
 739:..\..\..\BSP/bsp.c ****     
 740:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the X-Axis BOTTOM Half Value
 1048              		.loc 1 740 0
 1049 0036 1523     		movs	r3, #21
 1050 0038 FB18     		adds	r3, r7, r3
 1051 003a 1B78     		ldrb	r3, [r3]
 1052 003c 19B2     		sxth	r1, r3
 1053 003e 1623     		movs	r3, #22
 1054 0040 FB18     		adds	r3, r7, r3
 1055 0042 1622     		movs	r2, #22
 1056 0044 BA18     		adds	r2, r7, r2
 1057 0046 1288     		ldrh	r2, [r2]
 1058 0048 0A43     		orrs	r2, r1
 1059 004a 1A80     		strh	r2, [r3]
 741:..\..\..\BSP/bsp.c ****     
 742:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust X-Axis Value if Over Limi
 1060              		.loc 1 742 0
 1061 004c 1623     		movs	r3, #22
 1062 004e FB18     		adds	r3, r7, r3
 1063 0050 0022     		movs	r2, #0
 1064 0052 9B5E     		ldrsh	r3, [r3, r2]
 1065 0054 002B     		cmp	r3, #0
 1066 0056 11DA     		bge	.L48
 743:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1067              		.loc 1 743 0
 1068 0058 1623     		movs	r3, #22
 1069 005a FB18     		adds	r3, r7, r3
 1070 005c 1622     		movs	r2, #22
 1071 005e BA18     		adds	r2, r7, r2
 1072 0060 0021     		movs	r1, #0
 1073 0062 525E     		ldrsh	r2, [r2, r1]
 1074 0064 1211     		asrs	r2, r2, #4
 1075 0066 1A80     		strh	r2, [r3]
 744:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on X-Axi
 1076              		.loc 1 744 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 33


 1077 0068 1623     		movs	r3, #22
 1078 006a FB18     		adds	r3, r7, r3
 1079 006c 1B88     		ldrh	r3, [r3]
 1080 006e 514A     		ldr	r2, .L54
 1081 0070 1343     		orrs	r3, r2
 1082 0072 9AB2     		uxth	r2, r3
 1083 0074 1623     		movs	r3, #22
 1084 0076 FB18     		adds	r3, r7, r3
 1085 0078 1A80     		strh	r2, [r3]
 1086 007a 07E0     		b	.L49
 1087              	.L48:
 745:..\..\..\BSP/bsp.c ****     } else {
 746:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1088              		.loc 1 746 0
 1089 007c 1623     		movs	r3, #22
 1090 007e FB18     		adds	r3, r7, r3
 1091 0080 1622     		movs	r2, #22
 1092 0082 BA18     		adds	r2, r7, r2
 1093 0084 0021     		movs	r1, #0
 1094 0086 525E     		ldrsh	r2, [r2, r1]
 1095 0088 1211     		asrs	r2, r2, #4
 1096 008a 1A80     		strh	r2, [r3]
 1097              	.L49:
 747:..\..\..\BSP/bsp.c ****     }
 748:..\..\..\BSP/bsp.c ****     
 749:..\..\..\BSP/bsp.c ****    *x_axis = axis_val;                                          /* Assign X-Axis Value to Return.  
 1098              		.loc 1 749 0
 1099 008c FB68     		ldr	r3, [r7, #12]
 1100 008e 1622     		movs	r2, #22
 1101 0090 BA18     		adds	r2, r7, r2
 1102 0092 1288     		ldrh	r2, [r2]
 1103 0094 1A80     		strh	r2, [r3]
 750:..\..\..\BSP/bsp.c **** 
 751:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ Y-AXIS DA
 752:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Y-Axis HIGH Register fo
 1104              		.loc 1 752 0
 1105 0096 1523     		movs	r3, #21
 1106 0098 FB18     		adds	r3, r7, r3
 1107 009a 1A00     		movs	r2, r3
 1108 009c 0921     		movs	r1, #9
 1109 009e 0120     		movs	r0, #1
 1110 00a0 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 753:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_YOUT_H,
 754:..\..\..\BSP/bsp.c ****                       &data_resp);
 755:..\..\..\BSP/bsp.c ****     
 756:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place Y-Axis TOP Half Value onto
 1111              		.loc 1 756 0
 1112 00a4 1523     		movs	r3, #21
 1113 00a6 FB18     		adds	r3, r7, r3
 1114 00a8 1B78     		ldrb	r3, [r3]
 1115 00aa 1A02     		lsls	r2, r3, #8
 1116 00ac 1623     		movs	r3, #22
 1117 00ae FB18     		adds	r3, r7, r3
 1118 00b0 1A80     		strh	r2, [r3]
 757:..\..\..\BSP/bsp.c **** 
 758:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Y-Axis LOW  Register fo
 1119              		.loc 1 758 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 34


 1120 00b2 1523     		movs	r3, #21
 1121 00b4 FB18     		adds	r3, r7, r3
 1122 00b6 1A00     		movs	r2, r3
 1123 00b8 0821     		movs	r1, #8
 1124 00ba 0120     		movs	r0, #1
 1125 00bc FFF7FEFF 		bl	BSP_Accel_RegRdWr
 759:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_YOUT_L,
 760:..\..\..\BSP/bsp.c ****                       &data_resp);
 761:..\..\..\BSP/bsp.c ****     
 762:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the Y-Axis BOTTOM Half Value
 1126              		.loc 1 762 0
 1127 00c0 1523     		movs	r3, #21
 1128 00c2 FB18     		adds	r3, r7, r3
 1129 00c4 1B78     		ldrb	r3, [r3]
 1130 00c6 19B2     		sxth	r1, r3
 1131 00c8 1623     		movs	r3, #22
 1132 00ca FB18     		adds	r3, r7, r3
 1133 00cc 1622     		movs	r2, #22
 1134 00ce BA18     		adds	r2, r7, r2
 1135 00d0 1288     		ldrh	r2, [r2]
 1136 00d2 0A43     		orrs	r2, r1
 1137 00d4 1A80     		strh	r2, [r3]
 763:..\..\..\BSP/bsp.c ****     
 764:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust Y-Axis Value if Over Limi
 1138              		.loc 1 764 0
 1139 00d6 1623     		movs	r3, #22
 1140 00d8 FB18     		adds	r3, r7, r3
 1141 00da 0022     		movs	r2, #0
 1142 00dc 9B5E     		ldrsh	r3, [r3, r2]
 1143 00de 002B     		cmp	r3, #0
 1144 00e0 11DA     		bge	.L50
 765:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1145              		.loc 1 765 0
 1146 00e2 1623     		movs	r3, #22
 1147 00e4 FB18     		adds	r3, r7, r3
 1148 00e6 1622     		movs	r2, #22
 1149 00e8 BA18     		adds	r2, r7, r2
 1150 00ea 0021     		movs	r1, #0
 1151 00ec 525E     		ldrsh	r2, [r2, r1]
 1152 00ee 1211     		asrs	r2, r2, #4
 1153 00f0 1A80     		strh	r2, [r3]
 766:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on Y-Axi
 1154              		.loc 1 766 0
 1155 00f2 1623     		movs	r3, #22
 1156 00f4 FB18     		adds	r3, r7, r3
 1157 00f6 1B88     		ldrh	r3, [r3]
 1158 00f8 2E4A     		ldr	r2, .L54
 1159 00fa 1343     		orrs	r3, r2
 1160 00fc 9AB2     		uxth	r2, r3
 1161 00fe 1623     		movs	r3, #22
 1162 0100 FB18     		adds	r3, r7, r3
 1163 0102 1A80     		strh	r2, [r3]
 1164 0104 07E0     		b	.L51
 1165              	.L50:
 767:..\..\..\BSP/bsp.c ****     } else {
 768:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1166              		.loc 1 768 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 35


 1167 0106 1623     		movs	r3, #22
 1168 0108 FB18     		adds	r3, r7, r3
 1169 010a 1622     		movs	r2, #22
 1170 010c BA18     		adds	r2, r7, r2
 1171 010e 0021     		movs	r1, #0
 1172 0110 525E     		ldrsh	r2, [r2, r1]
 1173 0112 1211     		asrs	r2, r2, #4
 1174 0114 1A80     		strh	r2, [r3]
 1175              	.L51:
 769:..\..\..\BSP/bsp.c ****     }
 770:..\..\..\BSP/bsp.c ****     
 771:..\..\..\BSP/bsp.c ****    *y_axis = axis_val;                                          /* Assign Y-Axis Value to Return.  
 1176              		.loc 1 771 0
 1177 0116 BB68     		ldr	r3, [r7, #8]
 1178 0118 1622     		movs	r2, #22
 1179 011a BA18     		adds	r2, r7, r2
 1180 011c 1288     		ldrh	r2, [r2]
 1181 011e 1A80     		strh	r2, [r3]
 772:..\..\..\BSP/bsp.c ****     
 773:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ Z-AXIS DA
 774:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Z-Axis HIGH Register fo
 1182              		.loc 1 774 0
 1183 0120 1523     		movs	r3, #21
 1184 0122 FB18     		adds	r3, r7, r3
 1185 0124 1A00     		movs	r2, r3
 1186 0126 0B21     		movs	r1, #11
 1187 0128 0120     		movs	r0, #1
 1188 012a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 775:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_ZOUT_H,
 776:..\..\..\BSP/bsp.c ****                       &data_resp);
 777:..\..\..\BSP/bsp.c ****     
 778:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place Z-Axis TOP Half Value onto
 1189              		.loc 1 778 0
 1190 012e 1523     		movs	r3, #21
 1191 0130 FB18     		adds	r3, r7, r3
 1192 0132 1B78     		ldrb	r3, [r3]
 1193 0134 1A02     		lsls	r2, r3, #8
 1194 0136 1623     		movs	r3, #22
 1195 0138 FB18     		adds	r3, r7, r3
 1196 013a 1A80     		strh	r2, [r3]
 779:..\..\..\BSP/bsp.c **** 
 780:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Z-Axis LOW  Register fo
 1197              		.loc 1 780 0
 1198 013c 1523     		movs	r3, #21
 1199 013e FB18     		adds	r3, r7, r3
 1200 0140 1A00     		movs	r2, r3
 1201 0142 0A21     		movs	r1, #10
 1202 0144 0120     		movs	r0, #1
 1203 0146 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 781:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_ZOUT_L,
 782:..\..\..\BSP/bsp.c ****                       &data_resp);
 783:..\..\..\BSP/bsp.c ****     
 784:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the Z-Axis BOTTOM Half Value
 1204              		.loc 1 784 0
 1205 014a 1523     		movs	r3, #21
 1206 014c FB18     		adds	r3, r7, r3
 1207 014e 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 36


 1208 0150 19B2     		sxth	r1, r3
 1209 0152 1623     		movs	r3, #22
 1210 0154 FB18     		adds	r3, r7, r3
 1211 0156 1622     		movs	r2, #22
 1212 0158 BA18     		adds	r2, r7, r2
 1213 015a 1288     		ldrh	r2, [r2]
 1214 015c 0A43     		orrs	r2, r1
 1215 015e 1A80     		strh	r2, [r3]
 785:..\..\..\BSP/bsp.c ****     
 786:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust Z-Axis Value if Over Limi
 1216              		.loc 1 786 0
 1217 0160 1623     		movs	r3, #22
 1218 0162 FB18     		adds	r3, r7, r3
 1219 0164 0022     		movs	r2, #0
 1220 0166 9B5E     		ldrsh	r3, [r3, r2]
 1221 0168 002B     		cmp	r3, #0
 1222 016a 11DA     		bge	.L52
 787:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1223              		.loc 1 787 0
 1224 016c 1623     		movs	r3, #22
 1225 016e FB18     		adds	r3, r7, r3
 1226 0170 1622     		movs	r2, #22
 1227 0172 BA18     		adds	r2, r7, r2
 1228 0174 0021     		movs	r1, #0
 1229 0176 525E     		ldrsh	r2, [r2, r1]
 1230 0178 1211     		asrs	r2, r2, #4
 1231 017a 1A80     		strh	r2, [r3]
 788:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on Z-Axi
 1232              		.loc 1 788 0
 1233 017c 1623     		movs	r3, #22
 1234 017e FB18     		adds	r3, r7, r3
 1235 0180 1B88     		ldrh	r3, [r3]
 1236 0182 0C4A     		ldr	r2, .L54
 1237 0184 1343     		orrs	r3, r2
 1238 0186 9AB2     		uxth	r2, r3
 1239 0188 1623     		movs	r3, #22
 1240 018a FB18     		adds	r3, r7, r3
 1241 018c 1A80     		strh	r2, [r3]
 1242 018e 07E0     		b	.L53
 1243              	.L52:
 789:..\..\..\BSP/bsp.c ****     } else {
 790:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1244              		.loc 1 790 0
 1245 0190 1623     		movs	r3, #22
 1246 0192 FB18     		adds	r3, r7, r3
 1247 0194 1622     		movs	r2, #22
 1248 0196 BA18     		adds	r2, r7, r2
 1249 0198 0021     		movs	r1, #0
 1250 019a 525E     		ldrsh	r2, [r2, r1]
 1251 019c 1211     		asrs	r2, r2, #4
 1252 019e 1A80     		strh	r2, [r3]
 1253              	.L53:
 791:..\..\..\BSP/bsp.c ****     }
 792:..\..\..\BSP/bsp.c ****     
 793:..\..\..\BSP/bsp.c ****    *z_axis = axis_val;                                          /* Assign Z-Axis Value to Return.  
 1254              		.loc 1 793 0
 1255 01a0 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 37


 1256 01a2 1622     		movs	r2, #22
 1257 01a4 BA18     		adds	r2, r7, r2
 1258 01a6 1288     		ldrh	r2, [r2]
 1259 01a8 1A80     		strh	r2, [r3]
 794:..\..\..\BSP/bsp.c **** }
 1260              		.loc 1 794 0
 1261 01aa C046     		nop
 1262 01ac BD46     		mov	sp, r7
 1263 01ae 06B0     		add	sp, sp, #24
 1264              		@ sp needed
 1265 01b0 80BD     		pop	{r7, pc}
 1266              	.L55:
 1267 01b2 C046     		.align	2
 1268              	.L54:
 1269 01b4 00F0FFFF 		.word	-4096
 1270              		.cfi_endproc
 1271              	.LFE45:
 1272              		.size	BSP_Accel_Rd, .-BSP_Accel_Rd
 1273              		.section	.text.BSP_Accel_ISR_Handler,"ax",%progbits
 1274              		.align	2
 1275              		.global	BSP_Accel_ISR_Handler
 1276              		.code	16
 1277              		.thumb_func
 1278              		.type	BSP_Accel_ISR_Handler, %function
 1279              	BSP_Accel_ISR_Handler:
 1280              	.LFB46:
 795:..\..\..\BSP/bsp.c **** 
 796:..\..\..\BSP/bsp.c **** 
 797:..\..\..\BSP/bsp.c **** /*
 798:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 799:..\..\..\BSP/bsp.c **** *                                       BSP_Accel_ISR_Handler()
 800:..\..\..\BSP/bsp.c **** *
 801:..\..\..\BSP/bsp.c **** * Description : ISR Handler (I2C Based) for the KXTJ2-1009 3-Axis Accelerometer.
 802:..\..\..\BSP/bsp.c **** *
 803:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 804:..\..\..\BSP/bsp.c **** *
 805:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 806:..\..\..\BSP/bsp.c **** *
 807:..\..\..\BSP/bsp.c **** * Caller(s)   : This is an ISR.
 808:..\..\..\BSP/bsp.c **** *
 809:..\..\..\BSP/bsp.c **** * Note(s)     : (1) See BSP_Init Note (3) for more information on how to convert this ISR Handler i
 810:..\..\..\BSP/bsp.c **** *                   an OS-Aware ISR Handler.
 811:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 812:..\..\..\BSP/bsp.c **** */
 813:..\..\..\BSP/bsp.c **** 
 814:..\..\..\BSP/bsp.c **** CY_ISR(BSP_Accel_ISR_Handler)
 815:..\..\..\BSP/bsp.c **** {
 1281              		.loc 1 815 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 8
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285 0000 80B5     		push	{r7, lr}
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 7, -8
 1288              		.cfi_offset 14, -4
 1289 0002 82B0     		sub	sp, sp, #8
 1290              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 38


 1291 0004 00AF     		add	r7, sp, #0
 1292              		.cfi_def_cfa_register 7
 816:..\..\..\BSP/bsp.c ****     CPU_INT08U  data_resp;
 817:..\..\..\BSP/bsp.c ****     
 818:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- CLR PENDING IN
 819:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read INT_REL to Clear any Int Sr
 1293              		.loc 1 819 0
 1294 0006 FB1D     		adds	r3, r7, #7
 1295 0008 1A00     		movs	r2, r3
 1296 000a 1A21     		movs	r1, #26
 1297 000c 0120     		movs	r0, #1
 1298 000e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 820:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_REL,
 821:..\..\..\BSP/bsp.c ****                       &data_resp);
 822:..\..\..\BSP/bsp.c ****     
 823:..\..\..\BSP/bsp.c ****     Accel_Pin_ClearInterrupt();                                 /* Clear Pending GPIO Interrupt.   
 1299              		.loc 1 823 0
 1300 0012 FFF7FEFF 		bl	Accel_Pin_ClearInterrupt
 824:..\..\..\BSP/bsp.c **** }...
 1301              		.loc 1 824 0
 1302 0016 C046     		nop
 1303 0018 BD46     		mov	sp, r7
 1304 001a 02B0     		add	sp, sp, #8
 1305              		@ sp needed
 1306 001c 80BD     		pop	{r7, pc}
 1307              		.cfi_endproc
 1308              	.LFE46:
 1309              		.size	BSP_Accel_ISR_Handler, .-BSP_Accel_ISR_Handler
 1310 001e C046     		.text
 1311              	.Letext0:
 1312              		.file 2 "..\\..\\..\\..\\..\\..\\Software\\uC-CPU\\ARM-Cortex-M0\\GNU/cpu.h"
 1313              		.file 3 "Generated_Source\\PSoC4/cytypes.h"
 1314              		.file 4 "..\\..\\..\\BSP\\bsp.h"
 1315              		.section	.debug_info,"",%progbits
 1316              	.Ldebug_info0:
 1317 0000 12040000 		.4byte	0x412
 1318 0004 0400     		.2byte	0x4
 1319 0006 00000000 		.4byte	.Ldebug_abbrev0
 1320 000a 04       		.byte	0x4
 1321 000b 01       		.uleb128 0x1
 1322 000c 69010000 		.4byte	.LASF58
 1323 0010 0C       		.byte	0xc
 1324 0011 0D000000 		.4byte	.LASF59
 1325 0015 75000000 		.4byte	.LASF60
 1326 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1327 001d 00000000 		.4byte	0
 1328 0021 00000000 		.4byte	.Ldebug_line0
 1329 0025 02       		.uleb128 0x2
 1330 0026 01       		.byte	0x1
 1331 0027 06       		.byte	0x6
 1332 0028 FE000000 		.4byte	.LASF0
 1333 002c 02       		.uleb128 0x2
 1334 002d 01       		.byte	0x1
 1335 002e 08       		.byte	0x8
 1336 002f 26020000 		.4byte	.LASF1
 1337 0033 02       		.uleb128 0x2
 1338 0034 02       		.byte	0x2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 39


 1339 0035 05       		.byte	0x5
 1340 0036 3D000000 		.4byte	.LASF2
 1341 003a 02       		.uleb128 0x2
 1342 003b 02       		.byte	0x2
 1343 003c 07       		.byte	0x7
 1344 003d 90020000 		.4byte	.LASF3
 1345 0041 02       		.uleb128 0x2
 1346 0042 04       		.byte	0x4
 1347 0043 05       		.byte	0x5
 1348 0044 36010000 		.4byte	.LASF4
 1349 0048 02       		.uleb128 0x2
 1350 0049 04       		.byte	0x4
 1351 004a 07       		.byte	0x7
 1352 004b 1F030000 		.4byte	.LASF5
 1353 004f 02       		.uleb128 0x2
 1354 0050 08       		.byte	0x8
 1355 0051 05       		.byte	0x5
 1356 0052 10010000 		.4byte	.LASF6
 1357 0056 02       		.uleb128 0x2
 1358 0057 08       		.byte	0x8
 1359 0058 07       		.byte	0x7
 1360 0059 3D020000 		.4byte	.LASF7
 1361 005d 03       		.uleb128 0x3
 1362 005e 04       		.byte	0x4
 1363 005f 05       		.byte	0x5
 1364 0060 696E7400 		.ascii	"int\000"
 1365 0064 02       		.uleb128 0x2
 1366 0065 04       		.byte	0x4
 1367 0066 07       		.byte	0x7
 1368 0067 9D030000 		.4byte	.LASF8
 1369 006b 02       		.uleb128 0x2
 1370 006c 08       		.byte	0x8
 1371 006d 04       		.byte	0x4
 1372 006e 06020000 		.4byte	.LASF9
 1373 0072 02       		.uleb128 0x2
 1374 0073 04       		.byte	0x4
 1375 0074 07       		.byte	0x7
 1376 0075 47000000 		.4byte	.LASF10
 1377 0079 02       		.uleb128 0x2
 1378 007a 01       		.byte	0x1
 1379 007b 08       		.byte	0x8
 1380 007c CD020000 		.4byte	.LASF11
 1381 0080 04       		.uleb128 0x4
 1382 0081 2A010000 		.4byte	.LASF12
 1383 0085 02       		.byte	0x2
 1384 0086 7D       		.byte	0x7d
 1385 0087 2C000000 		.4byte	0x2c
 1386 008b 04       		.uleb128 0x4
 1387 008c C2020000 		.4byte	.LASF13
 1388 0090 02       		.byte	0x2
 1389 0091 7E       		.byte	0x7e
 1390 0092 2C000000 		.4byte	0x2c
 1391 0096 04       		.uleb128 0x4
 1392 0097 B5030000 		.4byte	.LASF14
 1393 009b 02       		.byte	0x2
 1394 009c 80       		.byte	0x80
 1395 009d 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 40


 1396 00a1 04       		.uleb128 0x4
 1397 00a2 AA030000 		.4byte	.LASF15
 1398 00a6 02       		.byte	0x2
 1399 00a7 81       		.byte	0x81
 1400 00a8 33000000 		.4byte	0x33
 1401 00ac 04       		.uleb128 0x4
 1402 00ad 03030000 		.4byte	.LASF16
 1403 00b1 02       		.byte	0x2
 1404 00b2 82       		.byte	0x82
 1405 00b3 64000000 		.4byte	0x64
 1406 00b7 02       		.uleb128 0x2
 1407 00b8 04       		.byte	0x4
 1408 00b9 04       		.byte	0x4
 1409 00ba 0A010000 		.4byte	.LASF17
 1410 00be 02       		.uleb128 0x2
 1411 00bf 08       		.byte	0x8
 1412 00c0 04       		.byte	0x4
 1413 00c1 3D030000 		.4byte	.LASF18
 1414 00c5 04       		.uleb128 0x4
 1415 00c6 0E030000 		.4byte	.LASF19
 1416 00ca 02       		.byte	0x2
 1417 00cb 8D       		.byte	0x8d
 1418 00cc D0000000 		.4byte	0xd0
 1419 00d0 05       		.uleb128 0x5
 1420 00d1 AC000000 		.4byte	0xac
 1421 00d5 06       		.uleb128 0x6
 1422 00d6 E5000000 		.4byte	.LASF20
 1423 00da 03       		.byte	0x3
 1424 00db E401     		.2byte	0x1e4
 1425 00dd 2C000000 		.4byte	0x2c
 1426 00e1 06       		.uleb128 0x6
 1427 00e2 CD000000 		.4byte	.LASF21
 1428 00e6 03       		.byte	0x3
 1429 00e7 E501     		.2byte	0x1e5
 1430 00e9 3A000000 		.4byte	0x3a
 1431 00ed 06       		.uleb128 0x6
 1432 00ee 18030000 		.4byte	.LASF22
 1433 00f2 03       		.byte	0x3
 1434 00f3 E601     		.2byte	0x1e6
 1435 00f5 48000000 		.4byte	0x48
 1436 00f9 07       		.uleb128 0x7
 1437 00fa EA020000 		.4byte	.LASF61
 1438 00fe 01       		.byte	0x1
 1439 00ff 2C000000 		.4byte	0x2c
 1440 0103 04       		.byte	0x4
 1441 0104 EB       		.byte	0xeb
 1442 0105 1C010000 		.4byte	0x11c
 1443 0109 08       		.uleb128 0x8
 1444 010a 12020000 		.4byte	.LASF23
 1445 010e 00       		.byte	0
 1446 010f 08       		.uleb128 0x8
 1447 0110 C0030000 		.4byte	.LASF24
 1448 0114 01       		.byte	0x1
 1449 0115 08       		.uleb128 0x8
 1450 0116 EB000000 		.4byte	.LASF25
 1451 011a 02       		.byte	0x2
 1452 011b 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 41


 1453 011c 04       		.uleb128 0x4
 1454 011d 4F030000 		.4byte	.LASF26
 1455 0121 04       		.byte	0x4
 1456 0122 EF       		.byte	0xef
 1457 0123 F9000000 		.4byte	0xf9
 1458 0127 09       		.uleb128 0x9
 1459 0128 62030000 		.4byte	.LASF29
 1460 012c 01       		.byte	0x1
 1461 012d 9E       		.byte	0x9e
 1462 012e 00000000 		.4byte	.LFB34
 1463 0132 5C000000 		.4byte	.LFE34-.LFB34
 1464 0136 01       		.uleb128 0x1
 1465 0137 9C       		.byte	0x9c
 1466 0138 59010000 		.4byte	0x159
 1467 013c 0A       		.uleb128 0xa
 1468 013d 7E020000 		.4byte	.LASF27
 1469 0141 01       		.byte	0x1
 1470 0142 A0       		.byte	0xa0
 1471 0143 AC000000 		.4byte	0xac
 1472 0147 02       		.uleb128 0x2
 1473 0148 91       		.byte	0x91
 1474 0149 74       		.sleb128 -12
 1475 014a 0A       		.uleb128 0xa
 1476 014b 44030000 		.4byte	.LASF28
 1477 014f 01       		.byte	0x1
 1478 0150 A1       		.byte	0xa1
 1479 0151 59010000 		.4byte	0x159
 1480 0155 02       		.uleb128 0x2
 1481 0156 91       		.byte	0x91
 1482 0157 70       		.sleb128 -16
 1483 0158 00       		.byte	0
 1484 0159 0B       		.uleb128 0xb
 1485 015a 04       		.byte	0x4
 1486 015b AC000000 		.4byte	0xac
 1487 015f 09       		.uleb128 0x9
 1488 0160 3F010000 		.4byte	.LASF30
 1489 0164 01       		.byte	0x1
 1490 0165 CD       		.byte	0xcd
 1491 0166 00000000 		.4byte	.LFB35
 1492 016a 1E000000 		.4byte	.LFE35-.LFB35
 1493 016e 01       		.uleb128 0x1
 1494 016f 9C       		.byte	0x9c
 1495 0170 83010000 		.4byte	0x183
 1496 0174 0A       		.uleb128 0xa
 1497 0175 B5020000 		.4byte	.LASF31
 1498 0179 01       		.byte	0x1
 1499 017a CF       		.byte	0xcf
 1500 017b AC000000 		.4byte	0xac
 1501 017f 02       		.uleb128 0x2
 1502 0180 91       		.byte	0x91
 1503 0181 74       		.sleb128 -12
 1504 0182 00       		.byte	0
 1505 0183 0C       		.uleb128 0xc
 1506 0184 D3030000 		.4byte	.LASF62
 1507 0188 01       		.byte	0x1
 1508 0189 E8       		.byte	0xe8
 1509 018a AC000000 		.4byte	0xac
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 42


 1510 018e 00000000 		.4byte	.LFB36
 1511 0192 10000000 		.4byte	.LFE36-.LFB36
 1512 0196 01       		.uleb128 0x1
 1513 0197 9C       		.byte	0x9c
 1514 0198 0D       		.uleb128 0xd
 1515 0199 DA000000 		.4byte	.LASF32
 1516 019d 01       		.byte	0x1
 1517 019e 0801     		.2byte	0x108
 1518 01a0 00000000 		.4byte	.LFB37
 1519 01a4 18000000 		.4byte	.LFE37-.LFB37
 1520 01a8 01       		.uleb128 0x1
 1521 01a9 9C       		.byte	0x9c
 1522 01aa 0D       		.uleb128 0xd
 1523 01ab 50010000 		.4byte	.LASF33
 1524 01af 01       		.byte	0x1
 1525 01b0 2101     		.2byte	0x121
 1526 01b2 00000000 		.4byte	.LFB38
 1527 01b6 24000000 		.4byte	.LFE38-.LFB38
 1528 01ba 01       		.uleb128 0x1
 1529 01bb 9C       		.byte	0x9c
 1530 01bc 0E       		.uleb128 0xe
 1531 01bd 62020000 		.4byte	.LASF34
 1532 01c1 01       		.byte	0x1
 1533 01c2 3E01     		.2byte	0x13e
 1534 01c4 00000000 		.4byte	.LFB39
 1535 01c8 E0000000 		.4byte	.LFE39-.LFB39
 1536 01cc 01       		.uleb128 0x1
 1537 01cd 9C       		.byte	0x9c
 1538 01ce 0F020000 		.4byte	0x20f
 1539 01d2 0F       		.uleb128 0xf
 1540 01d3 00000000 		.4byte	.LASF38
 1541 01d7 01       		.byte	0x1
 1542 01d8 3E01     		.2byte	0x13e
 1543 01da AC000000 		.4byte	0xac
 1544 01de 02       		.uleb128 0x2
 1545 01df 91       		.byte	0x91
 1546 01e0 6C       		.sleb128 -20
 1547 01e1 10       		.uleb128 0x10
 1548 01e2 D4000000 		.4byte	.LASF35
 1549 01e6 01       		.byte	0x1
 1550 01e7 4001     		.2byte	0x140
 1551 01e9 8B000000 		.4byte	0x8b
 1552 01ed 02       		.uleb128 0x2
 1553 01ee 91       		.byte	0x91
 1554 01ef 77       		.sleb128 -9
 1555 01f0 10       		.uleb128 0x10
 1556 01f1 93030000 		.4byte	.LASF36
 1557 01f5 01       		.byte	0x1
 1558 01f6 4101     		.2byte	0x141
 1559 01f8 8B000000 		.4byte	0x8b
 1560 01fc 02       		.uleb128 0x2
 1561 01fd 91       		.byte	0x91
 1562 01fe 76       		.sleb128 -10
 1563 01ff 10       		.uleb128 0x10
 1564 0200 86020000 		.4byte	.LASF37
 1565 0204 01       		.byte	0x1
 1566 0205 4201     		.2byte	0x142
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 43


 1567 0207 96000000 		.4byte	0x96
 1568 020b 02       		.uleb128 0x2
 1569 020c 91       		.byte	0x91
 1570 020d 74       		.sleb128 -12
 1571 020e 00       		.byte	0
 1572 020f 11       		.uleb128 0x11
 1573 0210 6B030000 		.4byte	.LASF39
 1574 0214 01       		.byte	0x1
 1575 0215 7A01     		.2byte	0x17a
 1576 0217 AC000000 		.4byte	0xac
 1577 021b 00000000 		.4byte	.LFB40
 1578 021f 9C000000 		.4byte	.LFE40-.LFB40
 1579 0223 01       		.uleb128 0x1
 1580 0224 9C       		.byte	0x9c
 1581 0225 57020000 		.4byte	0x257
 1582 0229 10       		.uleb128 0x10
 1583 022a 00000000 		.4byte	.LASF38
 1584 022e 01       		.byte	0x1
 1585 022f 7C01     		.2byte	0x17c
 1586 0231 AC000000 		.4byte	0xac
 1587 0235 02       		.uleb128 0x2
 1588 0236 91       		.byte	0x91
 1589 0237 74       		.sleb128 -12
 1590 0238 10       		.uleb128 0x10
 1591 0239 86020000 		.4byte	.LASF37
 1592 023d 01       		.byte	0x1
 1593 023e 7D01     		.2byte	0x17d
 1594 0240 96000000 		.4byte	0x96
 1595 0244 02       		.uleb128 0x2
 1596 0245 91       		.byte	0x91
 1597 0246 72       		.sleb128 -14
 1598 0247 10       		.uleb128 0x10
 1599 0248 93030000 		.4byte	.LASF36
 1600 024c 01       		.byte	0x1
 1601 024d 7E01     		.2byte	0x17e
 1602 024f 8B000000 		.4byte	0x8b
 1603 0253 02       		.uleb128 0x2
 1604 0254 91       		.byte	0x91
 1605 0255 71       		.sleb128 -15
 1606 0256 00       		.byte	0
 1607 0257 11       		.uleb128 0x11
 1608 0258 5A000000 		.4byte	.LASF40
 1609 025c 01       		.byte	0x1
 1610 025d B401     		.2byte	0x1b4
 1611 025f 80000000 		.4byte	0x80
 1612 0263 00000000 		.4byte	.LFB41
 1613 0267 30000000 		.4byte	.LFE41-.LFB41
 1614 026b 01       		.uleb128 0x1
 1615 026c 9C       		.byte	0x9c
 1616 026d 90020000 		.4byte	0x290
 1617 0271 10       		.uleb128 0x10
 1618 0272 6B000000 		.4byte	.LASF41
 1619 0276 01       		.byte	0x1
 1620 0277 B601     		.2byte	0x1b6
 1621 0279 80000000 		.4byte	0x80
 1622 027d 02       		.uleb128 0x2
 1623 027e 91       		.byte	0x91
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 44


 1624 027f 6E       		.sleb128 -18
 1625 0280 10       		.uleb128 0x10
 1626 0281 5B020000 		.4byte	.LASF42
 1627 0285 01       		.byte	0x1
 1628 0286 B701     		.2byte	0x1b7
 1629 0288 8B000000 		.4byte	0x8b
 1630 028c 02       		.uleb128 0x2
 1631 028d 91       		.byte	0x91
 1632 028e 6F       		.sleb128 -17
 1633 028f 00       		.byte	0
 1634 0290 0E       		.uleb128 0xe
 1635 0291 F7010000 		.4byte	.LASF43
 1636 0295 01       		.byte	0x1
 1637 0296 E101     		.2byte	0x1e1
 1638 0298 00000000 		.4byte	.LFB42
 1639 029c EC000000 		.4byte	.LFE42-.LFB42
 1640 02a0 01       		.uleb128 0x1
 1641 02a1 9C       		.byte	0x9c
 1642 02a2 C5020000 		.4byte	0x2c5
 1643 02a6 10       		.uleb128 0x10
 1644 02a7 5C010000 		.4byte	.LASF44
 1645 02ab 01       		.byte	0x1
 1646 02ac E301     		.2byte	0x1e3
 1647 02ae 80000000 		.4byte	0x80
 1648 02b2 02       		.uleb128 0x2
 1649 02b3 91       		.byte	0x91
 1650 02b4 6F       		.sleb128 -17
 1651 02b5 10       		.uleb128 0x10
 1652 02b6 50000000 		.4byte	.LASF45
 1653 02ba 01       		.byte	0x1
 1654 02bb E401     		.2byte	0x1e4
 1655 02bd 8B000000 		.4byte	0x8b
 1656 02c1 02       		.uleb128 0x2
 1657 02c2 91       		.byte	0x91
 1658 02c3 6E       		.sleb128 -18
 1659 02c4 00       		.byte	0
 1660 02c5 12       		.uleb128 0x12
 1661 02c6 7D030000 		.4byte	.LASF47
 1662 02ca 01       		.byte	0x1
 1663 02cb 4302     		.2byte	0x243
 1664 02cd 80000000 		.4byte	0x80
 1665 02d1 00000000 		.4byte	.LFB43
 1666 02d5 CE000000 		.4byte	.LFE43-.LFB43
 1667 02d9 01       		.uleb128 0x1
 1668 02da 9C       		.byte	0x9c
 1669 02db 0A030000 		.4byte	0x30a
 1670 02df 13       		.uleb128 0x13
 1671 02e0 1E010000 		.4byte	.LASF63
 1672 02e4 01       		.byte	0x1
 1673 02e5 4502     		.2byte	0x245
 1674 02e7 80000000 		.4byte	0x80
 1675 02eb 10       		.uleb128 0x10
 1676 02ec D2020000 		.4byte	.LASF46
 1677 02f0 01       		.byte	0x1
 1678 02f1 4602     		.2byte	0x246
 1679 02f3 80000000 		.4byte	0x80
 1680 02f7 02       		.uleb128 0x2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 45


 1681 02f8 91       		.byte	0x91
 1682 02f9 6F       		.sleb128 -17
 1683 02fa 10       		.uleb128 0x10
 1684 02fb 50000000 		.4byte	.LASF45
 1685 02ff 01       		.byte	0x1
 1686 0300 4702     		.2byte	0x247
 1687 0302 8B000000 		.4byte	0x8b
 1688 0306 02       		.uleb128 0x2
 1689 0307 91       		.byte	0x91
 1690 0308 6E       		.sleb128 -18
 1691 0309 00       		.byte	0
 1692 030a 12       		.uleb128 0x12
 1693 030b A3020000 		.4byte	.LASF48
 1694 030f 01       		.byte	0x1
 1695 0310 9502     		.2byte	0x295
 1696 0312 80000000 		.4byte	0x80
 1697 0316 00000000 		.4byte	.LFB44
 1698 031a F2000000 		.4byte	.LFE44-.LFB44
 1699 031e 01       		.uleb128 0x1
 1700 031f 9C       		.byte	0x9c
 1701 0320 70030000 		.4byte	0x370
 1702 0324 0F       		.uleb128 0xf
 1703 0325 FD020000 		.4byte	.LASF49
 1704 0329 01       		.byte	0x1
 1705 032a 9502     		.2byte	0x295
 1706 032c 1C010000 		.4byte	0x11c
 1707 0330 02       		.uleb128 0x2
 1708 0331 91       		.byte	0x91
 1709 0332 6F       		.sleb128 -17
 1710 0333 14       		.uleb128 0x14
 1711 0334 72656700 		.ascii	"reg\000"
 1712 0338 01       		.byte	0x1
 1713 0339 9602     		.2byte	0x296
 1714 033b 8B000000 		.4byte	0x8b
 1715 033f 02       		.uleb128 0x2
 1716 0340 91       		.byte	0x91
 1717 0341 6E       		.sleb128 -18
 1718 0342 0F       		.uleb128 0xf
 1719 0343 C7000000 		.4byte	.LASF50
 1720 0347 01       		.byte	0x1
 1721 0348 9702     		.2byte	0x297
 1722 034a 70030000 		.4byte	0x370
 1723 034e 02       		.uleb128 0x2
 1724 034f 91       		.byte	0x91
 1725 0350 68       		.sleb128 -24
 1726 0351 10       		.uleb128 0x10
 1727 0352 73020000 		.4byte	.LASF51
 1728 0356 01       		.byte	0x1
 1729 0357 9902     		.2byte	0x299
 1730 0359 8B000000 		.4byte	0x8b
 1731 035d 02       		.uleb128 0x2
 1732 035e 91       		.byte	0x91
 1733 035f 76       		.sleb128 -10
 1734 0360 10       		.uleb128 0x10
 1735 0361 5C010000 		.4byte	.LASF44
 1736 0365 01       		.byte	0x1
 1737 0366 9A02     		.2byte	0x29a
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 46


 1738 0368 80000000 		.4byte	0x80
 1739 036c 02       		.uleb128 0x2
 1740 036d 91       		.byte	0x91
 1741 036e 77       		.sleb128 -9
 1742 036f 00       		.byte	0
 1743 0370 0B       		.uleb128 0xb
 1744 0371 04       		.byte	0x4
 1745 0372 8B000000 		.4byte	0x8b
 1746 0376 0E       		.uleb128 0xe
 1747 0377 DD020000 		.4byte	.LASF52
 1748 037b 01       		.byte	0x1
 1749 037c D202     		.2byte	0x2d2
 1750 037e 00000000 		.4byte	.LFB45
 1751 0382 B8010000 		.4byte	.LFE45-.LFB45
 1752 0386 01       		.uleb128 0x1
 1753 0387 9C       		.byte	0x9c
 1754 0388 D8030000 		.4byte	0x3d8
 1755 038c 0F       		.uleb128 0xf
 1756 038d 20000000 		.4byte	.LASF53
 1757 0391 01       		.byte	0x1
 1758 0392 D202     		.2byte	0x2d2
 1759 0394 D8030000 		.4byte	0x3d8
 1760 0398 02       		.uleb128 0x2
 1761 0399 91       		.byte	0x91
 1762 039a 6C       		.sleb128 -20
 1763 039b 0F       		.uleb128 0xf
 1764 039c 54020000 		.4byte	.LASF54
 1765 03a0 01       		.byte	0x1
 1766 03a1 D302     		.2byte	0x2d3
 1767 03a3 D8030000 		.4byte	0x3d8
 1768 03a7 02       		.uleb128 0x2
 1769 03a8 91       		.byte	0x91
 1770 03a9 68       		.sleb128 -24
 1771 03aa 0F       		.uleb128 0xf
 1772 03ab 06000000 		.4byte	.LASF55
 1773 03af 01       		.byte	0x1
 1774 03b0 D402     		.2byte	0x2d4
 1775 03b2 D8030000 		.4byte	0x3d8
 1776 03b6 02       		.uleb128 0x2
 1777 03b7 91       		.byte	0x91
 1778 03b8 64       		.sleb128 -28
 1779 03b9 10       		.uleb128 0x10
 1780 03ba 34020000 		.4byte	.LASF56
 1781 03be 01       		.byte	0x1
 1782 03bf D602     		.2byte	0x2d6
 1783 03c1 A1000000 		.4byte	0xa1
 1784 03c5 02       		.uleb128 0x2
 1785 03c6 91       		.byte	0x91
 1786 03c7 76       		.sleb128 -10
 1787 03c8 10       		.uleb128 0x10
 1788 03c9 50000000 		.4byte	.LASF45
 1789 03cd 01       		.byte	0x1
 1790 03ce D702     		.2byte	0x2d7
 1791 03d0 8B000000 		.4byte	0x8b
 1792 03d4 02       		.uleb128 0x2
 1793 03d5 91       		.byte	0x91
 1794 03d6 75       		.sleb128 -11
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 47


 1795 03d7 00       		.byte	0
 1796 03d8 0B       		.uleb128 0xb
 1797 03d9 04       		.byte	0x4
 1798 03da A1000000 		.4byte	0xa1
 1799 03de 0E       		.uleb128 0xe
 1800 03df 27000000 		.4byte	.LASF57
 1801 03e3 01       		.byte	0x1
 1802 03e4 2E03     		.2byte	0x32e
 1803 03e6 00000000 		.4byte	.LFB46
 1804 03ea 1E000000 		.4byte	.LFE46-.LFB46
 1805 03ee 01       		.uleb128 0x1
 1806 03ef 9C       		.byte	0x9c
 1807 03f0 04040000 		.4byte	0x404
 1808 03f4 10       		.uleb128 0x10
 1809 03f5 50000000 		.4byte	.LASF45
 1810 03f9 01       		.byte	0x1
 1811 03fa 3003     		.2byte	0x330
 1812 03fc 8B000000 		.4byte	0x8b
 1813 0400 02       		.uleb128 0x2
 1814 0401 91       		.byte	0x91
 1815 0402 77       		.sleb128 -9
 1816 0403 00       		.byte	0
 1817 0404 15       		.uleb128 0x15
 1818 0405 31030000 		.4byte	.LASF64
 1819 0409 01       		.byte	0x1
 1820 040a 54       		.byte	0x54
 1821 040b AC000000 		.4byte	0xac
 1822 040f 05       		.uleb128 0x5
 1823 0410 03       		.byte	0x3
 1824 0411 00000000 		.4byte	RGB_PrevVal
 1825 0415 00       		.byte	0
 1826              		.section	.debug_abbrev,"",%progbits
 1827              	.Ldebug_abbrev0:
 1828 0000 01       		.uleb128 0x1
 1829 0001 11       		.uleb128 0x11
 1830 0002 01       		.byte	0x1
 1831 0003 25       		.uleb128 0x25
 1832 0004 0E       		.uleb128 0xe
 1833 0005 13       		.uleb128 0x13
 1834 0006 0B       		.uleb128 0xb
 1835 0007 03       		.uleb128 0x3
 1836 0008 0E       		.uleb128 0xe
 1837 0009 1B       		.uleb128 0x1b
 1838 000a 0E       		.uleb128 0xe
 1839 000b 55       		.uleb128 0x55
 1840 000c 17       		.uleb128 0x17
 1841 000d 11       		.uleb128 0x11
 1842 000e 01       		.uleb128 0x1
 1843 000f 10       		.uleb128 0x10
 1844 0010 17       		.uleb128 0x17
 1845 0011 00       		.byte	0
 1846 0012 00       		.byte	0
 1847 0013 02       		.uleb128 0x2
 1848 0014 24       		.uleb128 0x24
 1849 0015 00       		.byte	0
 1850 0016 0B       		.uleb128 0xb
 1851 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 48


 1852 0018 3E       		.uleb128 0x3e
 1853 0019 0B       		.uleb128 0xb
 1854 001a 03       		.uleb128 0x3
 1855 001b 0E       		.uleb128 0xe
 1856 001c 00       		.byte	0
 1857 001d 00       		.byte	0
 1858 001e 03       		.uleb128 0x3
 1859 001f 24       		.uleb128 0x24
 1860 0020 00       		.byte	0
 1861 0021 0B       		.uleb128 0xb
 1862 0022 0B       		.uleb128 0xb
 1863 0023 3E       		.uleb128 0x3e
 1864 0024 0B       		.uleb128 0xb
 1865 0025 03       		.uleb128 0x3
 1866 0026 08       		.uleb128 0x8
 1867 0027 00       		.byte	0
 1868 0028 00       		.byte	0
 1869 0029 04       		.uleb128 0x4
 1870 002a 16       		.uleb128 0x16
 1871 002b 00       		.byte	0
 1872 002c 03       		.uleb128 0x3
 1873 002d 0E       		.uleb128 0xe
 1874 002e 3A       		.uleb128 0x3a
 1875 002f 0B       		.uleb128 0xb
 1876 0030 3B       		.uleb128 0x3b
 1877 0031 0B       		.uleb128 0xb
 1878 0032 49       		.uleb128 0x49
 1879 0033 13       		.uleb128 0x13
 1880 0034 00       		.byte	0
 1881 0035 00       		.byte	0
 1882 0036 05       		.uleb128 0x5
 1883 0037 35       		.uleb128 0x35
 1884 0038 00       		.byte	0
 1885 0039 49       		.uleb128 0x49
 1886 003a 13       		.uleb128 0x13
 1887 003b 00       		.byte	0
 1888 003c 00       		.byte	0
 1889 003d 06       		.uleb128 0x6
 1890 003e 16       		.uleb128 0x16
 1891 003f 00       		.byte	0
 1892 0040 03       		.uleb128 0x3
 1893 0041 0E       		.uleb128 0xe
 1894 0042 3A       		.uleb128 0x3a
 1895 0043 0B       		.uleb128 0xb
 1896 0044 3B       		.uleb128 0x3b
 1897 0045 05       		.uleb128 0x5
 1898 0046 49       		.uleb128 0x49
 1899 0047 13       		.uleb128 0x13
 1900 0048 00       		.byte	0
 1901 0049 00       		.byte	0
 1902 004a 07       		.uleb128 0x7
 1903 004b 04       		.uleb128 0x4
 1904 004c 01       		.byte	0x1
 1905 004d 03       		.uleb128 0x3
 1906 004e 0E       		.uleb128 0xe
 1907 004f 0B       		.uleb128 0xb
 1908 0050 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 49


 1909 0051 49       		.uleb128 0x49
 1910 0052 13       		.uleb128 0x13
 1911 0053 3A       		.uleb128 0x3a
 1912 0054 0B       		.uleb128 0xb
 1913 0055 3B       		.uleb128 0x3b
 1914 0056 0B       		.uleb128 0xb
 1915 0057 01       		.uleb128 0x1
 1916 0058 13       		.uleb128 0x13
 1917 0059 00       		.byte	0
 1918 005a 00       		.byte	0
 1919 005b 08       		.uleb128 0x8
 1920 005c 28       		.uleb128 0x28
 1921 005d 00       		.byte	0
 1922 005e 03       		.uleb128 0x3
 1923 005f 0E       		.uleb128 0xe
 1924 0060 1C       		.uleb128 0x1c
 1925 0061 0B       		.uleb128 0xb
 1926 0062 00       		.byte	0
 1927 0063 00       		.byte	0
 1928 0064 09       		.uleb128 0x9
 1929 0065 2E       		.uleb128 0x2e
 1930 0066 01       		.byte	0x1
 1931 0067 3F       		.uleb128 0x3f
 1932 0068 19       		.uleb128 0x19
 1933 0069 03       		.uleb128 0x3
 1934 006a 0E       		.uleb128 0xe
 1935 006b 3A       		.uleb128 0x3a
 1936 006c 0B       		.uleb128 0xb
 1937 006d 3B       		.uleb128 0x3b
 1938 006e 0B       		.uleb128 0xb
 1939 006f 27       		.uleb128 0x27
 1940 0070 19       		.uleb128 0x19
 1941 0071 11       		.uleb128 0x11
 1942 0072 01       		.uleb128 0x1
 1943 0073 12       		.uleb128 0x12
 1944 0074 06       		.uleb128 0x6
 1945 0075 40       		.uleb128 0x40
 1946 0076 18       		.uleb128 0x18
 1947 0077 9642     		.uleb128 0x2116
 1948 0079 19       		.uleb128 0x19
 1949 007a 01       		.uleb128 0x1
 1950 007b 13       		.uleb128 0x13
 1951 007c 00       		.byte	0
 1952 007d 00       		.byte	0
 1953 007e 0A       		.uleb128 0xa
 1954 007f 34       		.uleb128 0x34
 1955 0080 00       		.byte	0
 1956 0081 03       		.uleb128 0x3
 1957 0082 0E       		.uleb128 0xe
 1958 0083 3A       		.uleb128 0x3a
 1959 0084 0B       		.uleb128 0xb
 1960 0085 3B       		.uleb128 0x3b
 1961 0086 0B       		.uleb128 0xb
 1962 0087 49       		.uleb128 0x49
 1963 0088 13       		.uleb128 0x13
 1964 0089 02       		.uleb128 0x2
 1965 008a 18       		.uleb128 0x18
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 50


 1966 008b 00       		.byte	0
 1967 008c 00       		.byte	0
 1968 008d 0B       		.uleb128 0xb
 1969 008e 0F       		.uleb128 0xf
 1970 008f 00       		.byte	0
 1971 0090 0B       		.uleb128 0xb
 1972 0091 0B       		.uleb128 0xb
 1973 0092 49       		.uleb128 0x49
 1974 0093 13       		.uleb128 0x13
 1975 0094 00       		.byte	0
 1976 0095 00       		.byte	0
 1977 0096 0C       		.uleb128 0xc
 1978 0097 2E       		.uleb128 0x2e
 1979 0098 00       		.byte	0
 1980 0099 3F       		.uleb128 0x3f
 1981 009a 19       		.uleb128 0x19
 1982 009b 03       		.uleb128 0x3
 1983 009c 0E       		.uleb128 0xe
 1984 009d 3A       		.uleb128 0x3a
 1985 009e 0B       		.uleb128 0xb
 1986 009f 3B       		.uleb128 0x3b
 1987 00a0 0B       		.uleb128 0xb
 1988 00a1 27       		.uleb128 0x27
 1989 00a2 19       		.uleb128 0x19
 1990 00a3 49       		.uleb128 0x49
 1991 00a4 13       		.uleb128 0x13
 1992 00a5 11       		.uleb128 0x11
 1993 00a6 01       		.uleb128 0x1
 1994 00a7 12       		.uleb128 0x12
 1995 00a8 06       		.uleb128 0x6
 1996 00a9 40       		.uleb128 0x40
 1997 00aa 18       		.uleb128 0x18
 1998 00ab 9742     		.uleb128 0x2117
 1999 00ad 19       		.uleb128 0x19
 2000 00ae 00       		.byte	0
 2001 00af 00       		.byte	0
 2002 00b0 0D       		.uleb128 0xd
 2003 00b1 2E       		.uleb128 0x2e
 2004 00b2 00       		.byte	0
 2005 00b3 3F       		.uleb128 0x3f
 2006 00b4 19       		.uleb128 0x19
 2007 00b5 03       		.uleb128 0x3
 2008 00b6 0E       		.uleb128 0xe
 2009 00b7 3A       		.uleb128 0x3a
 2010 00b8 0B       		.uleb128 0xb
 2011 00b9 3B       		.uleb128 0x3b
 2012 00ba 05       		.uleb128 0x5
 2013 00bb 27       		.uleb128 0x27
 2014 00bc 19       		.uleb128 0x19
 2015 00bd 11       		.uleb128 0x11
 2016 00be 01       		.uleb128 0x1
 2017 00bf 12       		.uleb128 0x12
 2018 00c0 06       		.uleb128 0x6
 2019 00c1 40       		.uleb128 0x40
 2020 00c2 18       		.uleb128 0x18
 2021 00c3 9642     		.uleb128 0x2116
 2022 00c5 19       		.uleb128 0x19
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 51


 2023 00c6 00       		.byte	0
 2024 00c7 00       		.byte	0
 2025 00c8 0E       		.uleb128 0xe
 2026 00c9 2E       		.uleb128 0x2e
 2027 00ca 01       		.byte	0x1
 2028 00cb 3F       		.uleb128 0x3f
 2029 00cc 19       		.uleb128 0x19
 2030 00cd 03       		.uleb128 0x3
 2031 00ce 0E       		.uleb128 0xe
 2032 00cf 3A       		.uleb128 0x3a
 2033 00d0 0B       		.uleb128 0xb
 2034 00d1 3B       		.uleb128 0x3b
 2035 00d2 05       		.uleb128 0x5
 2036 00d3 27       		.uleb128 0x27
 2037 00d4 19       		.uleb128 0x19
 2038 00d5 11       		.uleb128 0x11
 2039 00d6 01       		.uleb128 0x1
 2040 00d7 12       		.uleb128 0x12
 2041 00d8 06       		.uleb128 0x6
 2042 00d9 40       		.uleb128 0x40
 2043 00da 18       		.uleb128 0x18
 2044 00db 9642     		.uleb128 0x2116
 2045 00dd 19       		.uleb128 0x19
 2046 00de 01       		.uleb128 0x1
 2047 00df 13       		.uleb128 0x13
 2048 00e0 00       		.byte	0
 2049 00e1 00       		.byte	0
 2050 00e2 0F       		.uleb128 0xf
 2051 00e3 05       		.uleb128 0x5
 2052 00e4 00       		.byte	0
 2053 00e5 03       		.uleb128 0x3
 2054 00e6 0E       		.uleb128 0xe
 2055 00e7 3A       		.uleb128 0x3a
 2056 00e8 0B       		.uleb128 0xb
 2057 00e9 3B       		.uleb128 0x3b
 2058 00ea 05       		.uleb128 0x5
 2059 00eb 49       		.uleb128 0x49
 2060 00ec 13       		.uleb128 0x13
 2061 00ed 02       		.uleb128 0x2
 2062 00ee 18       		.uleb128 0x18
 2063 00ef 00       		.byte	0
 2064 00f0 00       		.byte	0
 2065 00f1 10       		.uleb128 0x10
 2066 00f2 34       		.uleb128 0x34
 2067 00f3 00       		.byte	0
 2068 00f4 03       		.uleb128 0x3
 2069 00f5 0E       		.uleb128 0xe
 2070 00f6 3A       		.uleb128 0x3a
 2071 00f7 0B       		.uleb128 0xb
 2072 00f8 3B       		.uleb128 0x3b
 2073 00f9 05       		.uleb128 0x5
 2074 00fa 49       		.uleb128 0x49
 2075 00fb 13       		.uleb128 0x13
 2076 00fc 02       		.uleb128 0x2
 2077 00fd 18       		.uleb128 0x18
 2078 00fe 00       		.byte	0
 2079 00ff 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 52


 2080 0100 11       		.uleb128 0x11
 2081 0101 2E       		.uleb128 0x2e
 2082 0102 01       		.byte	0x1
 2083 0103 3F       		.uleb128 0x3f
 2084 0104 19       		.uleb128 0x19
 2085 0105 03       		.uleb128 0x3
 2086 0106 0E       		.uleb128 0xe
 2087 0107 3A       		.uleb128 0x3a
 2088 0108 0B       		.uleb128 0xb
 2089 0109 3B       		.uleb128 0x3b
 2090 010a 05       		.uleb128 0x5
 2091 010b 27       		.uleb128 0x27
 2092 010c 19       		.uleb128 0x19
 2093 010d 49       		.uleb128 0x49
 2094 010e 13       		.uleb128 0x13
 2095 010f 11       		.uleb128 0x11
 2096 0110 01       		.uleb128 0x1
 2097 0111 12       		.uleb128 0x12
 2098 0112 06       		.uleb128 0x6
 2099 0113 40       		.uleb128 0x40
 2100 0114 18       		.uleb128 0x18
 2101 0115 9642     		.uleb128 0x2116
 2102 0117 19       		.uleb128 0x19
 2103 0118 01       		.uleb128 0x1
 2104 0119 13       		.uleb128 0x13
 2105 011a 00       		.byte	0
 2106 011b 00       		.byte	0
 2107 011c 12       		.uleb128 0x12
 2108 011d 2E       		.uleb128 0x2e
 2109 011e 01       		.byte	0x1
 2110 011f 03       		.uleb128 0x3
 2111 0120 0E       		.uleb128 0xe
 2112 0121 3A       		.uleb128 0x3a
 2113 0122 0B       		.uleb128 0xb
 2114 0123 3B       		.uleb128 0x3b
 2115 0124 05       		.uleb128 0x5
 2116 0125 27       		.uleb128 0x27
 2117 0126 19       		.uleb128 0x19
 2118 0127 49       		.uleb128 0x49
 2119 0128 13       		.uleb128 0x13
 2120 0129 11       		.uleb128 0x11
 2121 012a 01       		.uleb128 0x1
 2122 012b 12       		.uleb128 0x12
 2123 012c 06       		.uleb128 0x6
 2124 012d 40       		.uleb128 0x40
 2125 012e 18       		.uleb128 0x18
 2126 012f 9642     		.uleb128 0x2116
 2127 0131 19       		.uleb128 0x19
 2128 0132 01       		.uleb128 0x1
 2129 0133 13       		.uleb128 0x13
 2130 0134 00       		.byte	0
 2131 0135 00       		.byte	0
 2132 0136 13       		.uleb128 0x13
 2133 0137 34       		.uleb128 0x34
 2134 0138 00       		.byte	0
 2135 0139 03       		.uleb128 0x3
 2136 013a 0E       		.uleb128 0xe
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 53


 2137 013b 3A       		.uleb128 0x3a
 2138 013c 0B       		.uleb128 0xb
 2139 013d 3B       		.uleb128 0x3b
 2140 013e 05       		.uleb128 0x5
 2141 013f 49       		.uleb128 0x49
 2142 0140 13       		.uleb128 0x13
 2143 0141 00       		.byte	0
 2144 0142 00       		.byte	0
 2145 0143 14       		.uleb128 0x14
 2146 0144 05       		.uleb128 0x5
 2147 0145 00       		.byte	0
 2148 0146 03       		.uleb128 0x3
 2149 0147 08       		.uleb128 0x8
 2150 0148 3A       		.uleb128 0x3a
 2151 0149 0B       		.uleb128 0xb
 2152 014a 3B       		.uleb128 0x3b
 2153 014b 05       		.uleb128 0x5
 2154 014c 49       		.uleb128 0x49
 2155 014d 13       		.uleb128 0x13
 2156 014e 02       		.uleb128 0x2
 2157 014f 18       		.uleb128 0x18
 2158 0150 00       		.byte	0
 2159 0151 00       		.byte	0
 2160 0152 15       		.uleb128 0x15
 2161 0153 34       		.uleb128 0x34
 2162 0154 00       		.byte	0
 2163 0155 03       		.uleb128 0x3
 2164 0156 0E       		.uleb128 0xe
 2165 0157 3A       		.uleb128 0x3a
 2166 0158 0B       		.uleb128 0xb
 2167 0159 3B       		.uleb128 0x3b
 2168 015a 0B       		.uleb128 0xb
 2169 015b 49       		.uleb128 0x49
 2170 015c 13       		.uleb128 0x13
 2171 015d 3F       		.uleb128 0x3f
 2172 015e 19       		.uleb128 0x19
 2173 015f 02       		.uleb128 0x2
 2174 0160 18       		.uleb128 0x18
 2175 0161 00       		.byte	0
 2176 0162 00       		.byte	0
 2177 0163 00       		.byte	0
 2178              		.section	.debug_aranges,"",%progbits
 2179 0000 7C000000 		.4byte	0x7c
 2180 0004 0200     		.2byte	0x2
 2181 0006 00000000 		.4byte	.Ldebug_info0
 2182 000a 04       		.byte	0x4
 2183 000b 00       		.byte	0
 2184 000c 0000     		.2byte	0
 2185 000e 0000     		.2byte	0
 2186 0010 00000000 		.4byte	.LFB34
 2187 0014 5C000000 		.4byte	.LFE34-.LFB34
 2188 0018 00000000 		.4byte	.LFB35
 2189 001c 1E000000 		.4byte	.LFE35-.LFB35
 2190 0020 00000000 		.4byte	.LFB36
 2191 0024 10000000 		.4byte	.LFE36-.LFB36
 2192 0028 00000000 		.4byte	.LFB37
 2193 002c 18000000 		.4byte	.LFE37-.LFB37
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 54


 2194 0030 00000000 		.4byte	.LFB38
 2195 0034 24000000 		.4byte	.LFE38-.LFB38
 2196 0038 00000000 		.4byte	.LFB39
 2197 003c E0000000 		.4byte	.LFE39-.LFB39
 2198 0040 00000000 		.4byte	.LFB40
 2199 0044 9C000000 		.4byte	.LFE40-.LFB40
 2200 0048 00000000 		.4byte	.LFB41
 2201 004c 30000000 		.4byte	.LFE41-.LFB41
 2202 0050 00000000 		.4byte	.LFB42
 2203 0054 EC000000 		.4byte	.LFE42-.LFB42
 2204 0058 00000000 		.4byte	.LFB43
 2205 005c CE000000 		.4byte	.LFE43-.LFB43
 2206 0060 00000000 		.4byte	.LFB44
 2207 0064 F2000000 		.4byte	.LFE44-.LFB44
 2208 0068 00000000 		.4byte	.LFB45
 2209 006c B8010000 		.4byte	.LFE45-.LFB45
 2210 0070 00000000 		.4byte	.LFB46
 2211 0074 1E000000 		.4byte	.LFE46-.LFB46
 2212 0078 00000000 		.4byte	0
 2213 007c 00000000 		.4byte	0
 2214              		.section	.debug_ranges,"",%progbits
 2215              	.Ldebug_ranges0:
 2216 0000 00000000 		.4byte	.LFB34
 2217 0004 5C000000 		.4byte	.LFE34
 2218 0008 00000000 		.4byte	.LFB35
 2219 000c 1E000000 		.4byte	.LFE35
 2220 0010 00000000 		.4byte	.LFB36
 2221 0014 10000000 		.4byte	.LFE36
 2222 0018 00000000 		.4byte	.LFB37
 2223 001c 18000000 		.4byte	.LFE37
 2224 0020 00000000 		.4byte	.LFB38
 2225 0024 24000000 		.4byte	.LFE38
 2226 0028 00000000 		.4byte	.LFB39
 2227 002c E0000000 		.4byte	.LFE39
 2228 0030 00000000 		.4byte	.LFB40
 2229 0034 9C000000 		.4byte	.LFE40
 2230 0038 00000000 		.4byte	.LFB41
 2231 003c 30000000 		.4byte	.LFE41
 2232 0040 00000000 		.4byte	.LFB42
 2233 0044 EC000000 		.4byte	.LFE42
 2234 0048 00000000 		.4byte	.LFB43
 2235 004c CE000000 		.4byte	.LFE43
 2236 0050 00000000 		.4byte	.LFB44
 2237 0054 F2000000 		.4byte	.LFE44
 2238 0058 00000000 		.4byte	.LFB45
 2239 005c B8010000 		.4byte	.LFE45
 2240 0060 00000000 		.4byte	.LFB46
 2241 0064 1E000000 		.4byte	.LFE46
 2242 0068 00000000 		.4byte	0
 2243 006c 00000000 		.4byte	0
 2244              		.section	.debug_line,"",%progbits
 2245              	.Ldebug_line0:
 2246 0000 38020000 		.section	.debug_str,"MS",%progbits,1
 2246      02009300 
 2246      00000201 
 2246      FB0E0D00 
 2246      01010101 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 55


 2247              	.LASF38:
 2248 0000 636F6C6F 		.ascii	"color\000"
 2248      7200
 2249              	.LASF55:
 2250 0006 7A5F6178 		.ascii	"z_axis\000"
 2250      697300
 2251              	.LASF59:
 2252 000d 2E2E5C2E 		.ascii	"..\\..\\..\\BSP\\bsp.c\000"
 2252      2E5C2E2E 
 2252      5C425350 
 2252      5C627370 
 2252      2E6300
 2253              	.LASF53:
 2254 0020 785F6178 		.ascii	"x_axis\000"
 2254      697300
 2255              	.LASF57:
 2256 0027 4253505F 		.ascii	"BSP_Accel_ISR_Handler\000"
 2256      41636365 
 2256      6C5F4953 
 2256      525F4861 
 2256      6E646C65 
 2257              	.LASF2:
 2258 003d 73686F72 		.ascii	"short int\000"
 2258      7420696E 
 2258      7400
 2259              	.LASF10:
 2260 0047 73697A65 		.ascii	"sizetype\000"
 2260      74797065 
 2260      00
 2261              	.LASF45:
 2262 0050 64617461 		.ascii	"data_resp\000"
 2262      5F726573 
 2262      7000
 2263              	.LASF40:
 2264 005a 4253505F 		.ascii	"BSP_PB_StatusGet\000"
 2264      50425F53 
 2264      74617475 
 2264      73476574 
 2264      00
 2265              	.LASF41:
 2266 006b 70625F73 		.ascii	"pb_status\000"
 2266      74617475 
 2266      7300
 2267              	.LASF60:
 2268 0075 443A5C43 		.ascii	"D:\\CYTEST\\Micrium_CY8CKIT-044_OS3\\Examples\\Cypr"
 2268      59544553 
 2268      545C4D69 
 2268      63726975 
 2268      6D5F4359 
 2269 00a4 6573735C 		.ascii	"ess\\CY8CKIT-044\\OS3\\PSoC\\OS3.cydsn\000"
 2269      43593843 
 2269      4B49542D 
 2269      3034345C 
 2269      4F53335C 
 2270              	.LASF50:
 2271 00c7 76616C75 		.ascii	"value\000"
 2271      6500
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 56


 2272              	.LASF21:
 2273 00cd 75696E74 		.ascii	"uint16\000"
 2273      313600
 2274              	.LASF35:
 2275 00d4 616C7068 		.ascii	"alpha\000"
 2275      6100
 2276              	.LASF32:
 2277 00da 4253505F 		.ascii	"BSP_RGB_On\000"
 2277      5247425F 
 2277      4F6E00
 2278              	.LASF20:
 2279 00e5 75696E74 		.ascii	"uint8\000"
 2279      3800
 2280              	.LASF25:
 2281 00eb 4253505F 		.ascii	"BSP_KXTJ2_DIR_NONE\000"
 2281      4B58544A 
 2281      325F4449 
 2281      525F4E4F 
 2281      4E4500
 2282              	.LASF0:
 2283 00fe 7369676E 		.ascii	"signed char\000"
 2283      65642063 
 2283      68617200 
 2284              	.LASF17:
 2285 010a 666C6F61 		.ascii	"float\000"
 2285      7400
 2286              	.LASF6:
 2287 0110 6C6F6E67 		.ascii	"long long int\000"
 2287      206C6F6E 
 2287      6720696E 
 2287      7400
 2288              	.LASF63:
 2289 011e 74657374 		.ascii	"test_status\000"
 2289      5F737461 
 2289      74757300 
 2290              	.LASF12:
 2291 012a 4350555F 		.ascii	"CPU_BOOLEAN\000"
 2291      424F4F4C 
 2291      45414E00 
 2292              	.LASF4:
 2293 0136 6C6F6E67 		.ascii	"long int\000"
 2293      20696E74 
 2293      00
 2294              	.LASF30:
 2295 013f 4253505F 		.ascii	"BSP_CPU_TickInit\000"
 2295      4350555F 
 2295      5469636B 
 2295      496E6974 
 2295      00
 2296              	.LASF33:
 2297 0150 4253505F 		.ascii	"BSP_RGB_Off\000"
 2297      5247425F 
 2297      4F666600 
 2298              	.LASF44:
 2299 015c 61636365 		.ascii	"accel_status\000"
 2299      6C5F7374 
 2299      61747573 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 57


 2299      00
 2300              	.LASF58:
 2301 0169 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2301      43313120 
 2301      352E342E 
 2301      31203230 
 2301      31363036 
 2302 019c 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2302      20726576 
 2302      6973696F 
 2302      6E203233 
 2302      37373135 
 2303 01cf 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2303      66756E63 
 2303      74696F6E 
 2303      2D736563 
 2303      74696F6E 
 2304              	.LASF43:
 2305 01f7 4253505F 		.ascii	"BSP_Accel_Init\000"
 2305      41636365 
 2305      6C5F496E 
 2305      697400
 2306              	.LASF9:
 2307 0206 6C6F6E67 		.ascii	"long double\000"
 2307      20646F75 
 2307      626C6500 
 2308              	.LASF23:
 2309 0212 4253505F 		.ascii	"BSP_KXTJ2_DIR_WRITE\000"
 2309      4B58544A 
 2309      325F4449 
 2309      525F5752 
 2309      49544500 
 2310              	.LASF1:
 2311 0226 756E7369 		.ascii	"unsigned char\000"
 2311      676E6564 
 2311      20636861 
 2311      7200
 2312              	.LASF56:
 2313 0234 61786973 		.ascii	"axis_val\000"
 2313      5F76616C 
 2313      00
 2314              	.LASF7:
 2315 023d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2315      206C6F6E 
 2315      6720756E 
 2315      7369676E 
 2315      65642069 
 2316              	.LASF54:
 2317 0254 795F6178 		.ascii	"y_axis\000"
 2317      697300
 2318              	.LASF42:
 2319 025b 73775F76 		.ascii	"sw_val\000"
 2319      616C00
 2320              	.LASF34:
 2321 0262 4253505F 		.ascii	"BSP_RGB_ColorSet\000"
 2321      5247425F 
 2321      436F6C6F 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 58


 2321      72536574 
 2321      00
 2322              	.LASF51:
 2323 0273 6932635F 		.ascii	"i2c_status\000"
 2323      73746174 
 2323      757300
 2324              	.LASF27:
 2325 027e 7265675F 		.ascii	"reg_val\000"
 2325      76616C00 
 2326              	.LASF37:
 2327 0286 70776D5F 		.ascii	"pwm_color\000"
 2327      636F6C6F 
 2327      7200
 2328              	.LASF3:
 2329 0290 73686F72 		.ascii	"short unsigned int\000"
 2329      7420756E 
 2329      7369676E 
 2329      65642069 
 2329      6E7400
 2330              	.LASF48:
 2331 02a3 4253505F 		.ascii	"BSP_Accel_RegRdWr\000"
 2331      41636365 
 2331      6C5F5265 
 2331      67526457 
 2331      7200
 2332              	.LASF31:
 2333 02b5 6370755F 		.ascii	"cpu_clk_freq\000"
 2333      636C6B5F 
 2333      66726571 
 2333      00
 2334              	.LASF13:
 2335 02c2 4350555F 		.ascii	"CPU_INT08U\000"
 2335      494E5430 
 2335      385500
 2336              	.LASF11:
 2337 02cd 63686172 		.ascii	"char\000"
 2337      00
 2338              	.LASF46:
 2339 02d2 61636365 		.ascii	"accel_resp\000"
 2339      6C5F7265 
 2339      737000
 2340              	.LASF52:
 2341 02dd 4253505F 		.ascii	"BSP_Accel_Rd\000"
 2341      41636365 
 2341      6C5F5264 
 2341      00
 2342              	.LASF61:
 2343 02ea 6273705F 		.ascii	"bsp_kxtj2_data_dir\000"
 2343      6B78746A 
 2343      325F6461 
 2343      74615F64 
 2343      697200
 2344              	.LASF49:
 2345 02fd 72645F77 		.ascii	"rd_wr\000"
 2345      7200
 2346              	.LASF16:
 2347 0303 4350555F 		.ascii	"CPU_INT32U\000"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 59


 2347      494E5433 
 2347      325500
 2348              	.LASF19:
 2349 030e 4350555F 		.ascii	"CPU_REG32\000"
 2349      52454733 
 2349      3200
 2350              	.LASF22:
 2351 0318 75696E74 		.ascii	"uint32\000"
 2351      333200
 2352              	.LASF5:
 2353 031f 6C6F6E67 		.ascii	"long unsigned int\000"
 2353      20756E73 
 2353      69676E65 
 2353      6420696E 
 2353      7400
 2354              	.LASF64:
 2355 0331 5247425F 		.ascii	"RGB_PrevVal\000"
 2355      50726576 
 2355      56616C00 
 2356              	.LASF18:
 2357 033d 646F7562 		.ascii	"double\000"
 2357      6C6500
 2358              	.LASF28:
 2359 0344 705F7665 		.ascii	"p_vect_tbl\000"
 2359      63745F74 
 2359      626C00
 2360              	.LASF26:
 2361 034f 4253505F 		.ascii	"BSP_KXTJ2_DATA_DIR\000"
 2361      4B58544A 
 2361      325F4441 
 2361      54415F44 
 2361      495200
 2362              	.LASF29:
 2363 0362 4253505F 		.ascii	"BSP_Init\000"
 2363      496E6974 
 2363      00
 2364              	.LASF39:
 2365 036b 4253505F 		.ascii	"BSP_RGB_ColorRead\000"
 2365      5247425F 
 2365      436F6C6F 
 2365      72526561 
 2365      6400
 2366              	.LASF47:
 2367 037d 4253505F 		.ascii	"BSP_Accel_InitSelfTst\000"
 2367      41636365 
 2367      6C5F496E 
 2367      69745365 
 2367      6C665473 
 2368              	.LASF36:
 2369 0393 636F6C6F 		.ascii	"color_val\000"
 2369      725F7661 
 2369      6C00
 2370              	.LASF8:
 2371 039d 756E7369 		.ascii	"unsigned int\000"
 2371      676E6564 
 2371      20696E74 
 2371      00
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccNQILBb.s 			page 60


 2372              	.LASF15:
 2373 03aa 4350555F 		.ascii	"CPU_INT16S\000"
 2373      494E5431 
 2373      365300
 2374              	.LASF14:
 2375 03b5 4350555F 		.ascii	"CPU_INT16U\000"
 2375      494E5431 
 2375      365500
 2376              	.LASF24:
 2377 03c0 4253505F 		.ascii	"BSP_KXTJ2_DIR_READ\000"
 2377      4B58544A 
 2377      325F4449 
 2377      525F5245 
 2377      414400
 2378              	.LASF62:
 2379 03d3 4253505F 		.ascii	"BSP_CPU_ClkFreq\000"
 2379      4350555F 
 2379      436C6B46 
 2379      72657100 
 2380              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
